[
    {
        "id": "7d1f82b240d34d71",
        "type": "tab",
        "label": "HomePage",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ca0877022020e2a",
        "type": "tab",
        "label": "Melbourne-Simoco3001",
        "disabled": false,
        "info": "## Description\nThis is a alarm flow",
        "env": []
    },
    {
        "id": "ef8739be854896a4",
        "type": "tab",
        "label": "Melbourne-Simoco3002",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5a9c45d6665294c2",
        "type": "tab",
        "label": "Sydney-Simoco2001",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9f7d8463b4050bdd",
        "type": "tab",
        "label": "Sydney-Simoco2002",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d08b8dbadb5935bb",
        "type": "tab",
        "label": "Brisbane-Simoco7001",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "209767b8b09c73ee",
        "type": "tab",
        "label": "Brisbane-Simoco7002",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "194b60237c3d364f",
        "type": "tab",
        "label": "React",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f81078994e7bf9a5",
        "type": "group",
        "z": "ef8739be854896a4",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "27e61f12.c1a15",
            "d7d08440.31b678",
            "f22b1e9a.5d89b",
            "2166290d.98d736",
            "139b836e.7950ed",
            "9c8ab214.0ecaa",
            "4acfcc8a53794509",
            "30a25415e9358e70",
            "b71f1b12fd7a1d9c",
            "1ecc45dadc322c11",
            "4d23673ff2862391",
            "95b13489a2c83688",
            "3571a66fa779c1d7",
            "91346635a4bdb1d9",
            "1287cc89f61ec161",
            "d7fedd62a118f4a6",
            "edadc02dda58e2c2",
            "8e412ebd2dcd9e64",
            "85e51fd750d91956",
            "8738856eb139723d",
            "af8c030c62c22003",
            "0eedf40811743459"
        ],
        "x": 34,
        "y": 19,
        "w": 892,
        "h": 642
    },
    {
        "id": "c5bebc746873d273",
        "type": "group",
        "z": "7ca0877022020e2a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "793612058d6a039b",
            "5f6f375bc7c84657",
            "246940e1f1272419",
            "9d122703e2521fa1",
            "c67c5af0aec50f1c",
            "c39562961a6fc182",
            "f4c1d472e0ceec89",
            "b5e69b05079a9f31",
            "c9a92a2c0b8af0fd",
            "859988116300708c",
            "29b46564a5d9ada6",
            "349d3e93ecbec99b",
            "45a144db854e98bd",
            "57974a2ef4d7851a",
            "65ef0d87abb3708e",
            "678e8917bc34968b",
            "e88d7db3c1c3f62b",
            "a9eff5ed481a78ac",
            "6c94903ba2c673aa",
            "9efabd76f7624b38",
            "09bda9de7f30b766",
            "7de1b007f9dd0650"
        ],
        "x": 14,
        "y": 19,
        "w": 862,
        "h": 602
    },
    {
        "id": "300363b21332d0a9",
        "type": "group",
        "z": "5a9c45d6665294c2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fced9681f082291f",
            "250fc877872c999f",
            "13229b54da88a21b",
            "fc2ea173d343dfdf",
            "bc549d3921ab095e",
            "fdb9d88158dd8f79",
            "077c54ddd8250ed3",
            "f6085dedb2b19ae3",
            "c8aee0967669f6d1",
            "8cef0e8d3cb86d84",
            "c093056e67d4a4dc",
            "7c24503dd37391b5",
            "3a101d79bb9cb238",
            "32c3264fa61e24bd",
            "da1d769a12d944db",
            "39a8d2b34bf80b3c",
            "752e6fd71c0c5086",
            "607f80762a961c8e",
            "cc9b2c9c876a3228",
            "0d5e9360b335a9d2",
            "fd67ac174e8d3345",
            "9639ec1088f6125e"
        ],
        "x": 14,
        "y": 19,
        "w": 892,
        "h": 642
    },
    {
        "id": "8ed62cf511a5169c",
        "type": "group",
        "z": "9f7d8463b4050bdd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b80a05fa7cd501e4",
            "6029975ac383d528",
            "73809c4e7c63e5b9",
            "98c6254f53335e57",
            "3f59843cca1db20a",
            "5c1cad9e751a57d7",
            "709cf90a3771da5f",
            "3a5541cffd4ea14f",
            "5936ab552776e1f2",
            "1935b03642b4c867",
            "70553b292c205f97",
            "138178268ad03cde",
            "fa2817ef7637131f",
            "fcecec4111ebf14a",
            "c7e88216fa02e8c1",
            "2922a351751994f8",
            "831140ddab059738",
            "7ed864a7c87367d5",
            "b03154714cbd5ad1",
            "ab783fbbe1642c11",
            "2ebaea2a8fc4007d",
            "5382c2a2c1667a90"
        ],
        "x": 14,
        "y": 19,
        "w": 892,
        "h": 642
    },
    {
        "id": "384609e63dc0396a",
        "type": "group",
        "z": "d08b8dbadb5935bb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3427cbfea0edc842",
            "8862337e16aab2e9",
            "efa27e40f5acd546",
            "572c9e384c5439b9",
            "f3dd1faa2827901b",
            "940298c424ec1eeb",
            "602406b82d25a693",
            "e76d93247729ff16",
            "887ee3d443bfcbb4",
            "2c29b524f3203f41",
            "8b21a1f683e02ceb",
            "6ce7341368ac4082",
            "aa824143bebb1f4c",
            "4a4164ce4b67675b",
            "1a3ec4963c7b3322",
            "e7708a698184d12d",
            "b77fc9c19e405c8f",
            "077d33ed13f2d1b2",
            "efc7bea3ad629173",
            "942043689bf59e58",
            "8e30e349afeb86a8",
            "6e30734eec8e0e83"
        ],
        "x": 34,
        "y": 19,
        "w": 892,
        "h": 642
    },
    {
        "id": "f5579862632dcc68",
        "type": "group",
        "z": "209767b8b09c73ee",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "02bc14a0c90853ae",
            "53f12a0e4d4c4396",
            "5c827eb22c36ae73",
            "c2927fd1fb90876e",
            "f322123d77617466",
            "9c0882d3634f13a2",
            "181f5e12deb1f7a8",
            "4d0bcdb82bc48de9",
            "229f3849a06b71b3",
            "2249a709e794f9cf",
            "78abd039fc8c7011",
            "3a543527c04bd9dc",
            "84f0702dda060988",
            "100da3fbd178df6f",
            "c563bc87e00d81e9",
            "9edfe69503d019fe",
            "acb939e404d583b7",
            "6116494f63d0b57f",
            "6d5d4f74d46e069a",
            "67e40ec147a30a51",
            "0635b5ab40850706",
            "6f083c9d58a66c8c"
        ],
        "x": 14,
        "y": 19,
        "w": 892,
        "h": 602
    },
    {
        "id": "4a53d46b25bc2682",
        "type": "group",
        "z": "7d1f82b240d34d71",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d31c6e07c918a3d7",
            "4ae5f7bc06f4e087",
            "58796f9a219de9dd",
            "6cf70bad26da70ac",
            "cf38127b0f1242b4"
        ],
        "x": 14,
        "y": 19,
        "w": 832,
        "h": 162
    },
    {
        "id": "2eaa55a3838d35fd",
        "type": "group",
        "z": "7d1f82b240d34d71",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cff0654c34ad0a47",
            "e15794d65b9ffe88",
            "7f6375a8f6eca578",
            "bc712874f21174ac",
            "80e10f5157343e1a",
            "2a296ec9266ecc2f"
        ],
        "x": 14,
        "y": 219,
        "w": 432,
        "h": 202
    },
    {
        "id": "acb7b0c87d617fb3",
        "type": "group",
        "z": "d08b8dbadb5935bb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9eb69df2af23039c",
            "dd96a1b7a3ef2575",
            "5820566ef408c78d",
            "d933ae7718c59d69",
            "be66ec6af0ebd96a",
            "64a681c1b7e1ee19",
            "8e442d964dfe6fa5",
            "d8b76e2b0a6b9e32",
            "f59dfb8b9978c4b6",
            "a706694cb1c599ef",
            "0fa07def82104a13",
            "887432bfc8dc4763"
        ],
        "x": 34,
        "y": 679,
        "w": 1252,
        "h": 482
    },
    {
        "id": "80eb3268ec88e507",
        "type": "group",
        "z": "ef8739be854896a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "54f79f07dc20c956",
            "0c92723a3a3424a5",
            "fb9282a00e71c234",
            "c1fdc87d4ab8e430",
            "e0c9c9cab4044efa",
            "9be9253cea9aa492",
            "e5ebabf8867f2253",
            "94aa2ccdb054f6d3",
            "ce6c68ed96f7201a",
            "ac1050bdfb296f26",
            "b039767b3b60fd7f",
            "cf91c4ea3dff993b",
            "00bc66b542a4842f"
        ],
        "x": 34,
        "y": 679,
        "w": 1252,
        "h": 502
    },
    {
        "id": "48c022e0110ee1e7",
        "type": "group",
        "z": "5a9c45d6665294c2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "236ef0baa700e6ac",
            "90ce23bfe53567a6",
            "83f285170395537d",
            "b21b2799754a0e9c",
            "14b7401b2c81c81a",
            "c41971c1e7b65928",
            "2d7d6ff39c6f172d",
            "0f2b56f6635019ad",
            "5e96bc443b668ebd",
            "158579e394c43fc9",
            "ad7354dd247881a3"
        ],
        "x": 14,
        "y": 699,
        "w": 1252,
        "h": 482
    },
    {
        "id": "291b99c717285aa1",
        "type": "group",
        "z": "7d1f82b240d34d71",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1cfcba80295c6b48",
            "bc01faa414afd366",
            "eac0707239ef0c69",
            "afd0c6822973e96f"
        ],
        "x": 14,
        "y": 499,
        "w": 532,
        "h": 142
    },
    {
        "id": "b55ad710670cabdb",
        "type": "flexdash container",
        "name": "Simoco-Monitor-Pannel",
        "title": "",
        "kind": "StdGrid",
        "fd_children": ",cf38127b0f1242b4,58796f9a219de9dd,cff0654c34ad0a47,7f6375a8f6eca578,80e10f5157343e1a,afd0c6822973e96f",
        "tab": "faa3f6ef68ba47c6",
        "min_cols": 9,
        "max_cols": 9,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "fef6c0f6d48841d6",
        "type": "flexdash tab",
        "name": "Braisbane",
        "icon": "mdi-city",
        "title": "Braisbane",
        "fd_children": ",71ab2a3aff8e66bc,bfd2b1a765045cd2",
        "fd": "61e693942266360d"
    },
    {
        "id": "ad1e7ea49c0a5684",
        "type": "flexdash tab",
        "name": "Sydney",
        "icon": "mdi-city-variant-outline",
        "title": "Sydney",
        "fd_children": ",1e4b71831666e0d3,17b567d94611a34e",
        "fd": "61e693942266360d"
    },
    {
        "id": "61e693942266360d",
        "type": "flexdash dashboard",
        "port": 80,
        "ioOpts": "{}",
        "path": "/simoco",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": false,
        "name": "simoco fire alarm",
        "fd_children": ",faa3f6ef68ba47c6,46612d9ad1086276,ad1e7ea49c0a5684,fef6c0f6d48841d6,5de79445aee2f018,67119b1601e6ea6e"
    },
    {
        "id": "faa3f6ef68ba47c6",
        "type": "flexdash tab",
        "name": "Home",
        "icon": "mdi-view-dashboard",
        "title": "Home",
        "fd_children": ",b55ad710670cabdb",
        "fd": "61e693942266360d"
    },
    {
        "id": "46612d9ad1086276",
        "type": "flexdash tab",
        "name": "Melbourne",
        "icon": "mdi-home-city",
        "title": "Melbourne",
        "fd_children": ",eec937d7b14488a6,e835914f613f0649",
        "fd": "61e693942266360d"
    },
    {
        "id": "eec937d7b14488a6",
        "type": "flexdash container",
        "name": "Melbourne-Simoco3001",
        "title": "Melbourne-Simoco3001",
        "kind": "StdGrid",
        "fd_children": ",678e8917bc34968b,a9eff5ed481a78ac,e88d7db3c1c3f62b,7de1b007f9dd0650",
        "tab": "46612d9ad1086276",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "1e4b71831666e0d3",
        "type": "flexdash container",
        "name": "Sydney-Simoco2001",
        "title": "Sydney-Simoco2001",
        "kind": "StdGrid",
        "fd_children": ",0d5e9360b335a9d2,9639ec1088f6125e,fd67ac174e8d3345,f6085dedb2b19ae3,158579e394c43fc9",
        "tab": "ad1e7ea49c0a5684",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "17b567d94611a34e",
        "type": "flexdash container",
        "name": "Sydney-Simoco2002",
        "title": "Sydney-Simoco2002",
        "kind": "StdGrid",
        "fd_children": ",ab783fbbe1642c11,5382c2a2c1667a90,2ebaea2a8fc4007d,3a5541cffd4ea14f,b21b2799754a0e9c",
        "tab": "ad1e7ea49c0a5684",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "e835914f613f0649",
        "type": "flexdash container",
        "name": "Melbourne-Simoco3002",
        "title": "Melbourne-Simoco3002",
        "kind": "StdGrid",
        "fd_children": ",8738856eb139723d,0eedf40811743459,af8c030c62c22003,30a25415e9358e70,c1fdc87d4ab8e430,ac1050bdfb296f26",
        "tab": "46612d9ad1086276",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "71ab2a3aff8e66bc",
        "type": "flexdash container",
        "name": "Braisbane-Simoco7001",
        "title": "Braisbane-Simoco7001",
        "kind": "StdGrid",
        "fd_children": ",6e30734eec8e0e83,8e30e349afeb86a8,942043689bf59e58,d933ae7718c59d69,a706694cb1c599ef,8b21a1f683e02ceb",
        "tab": "fef6c0f6d48841d6",
        "min_cols": 1,
        "max_cols": 23,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "bfd2b1a765045cd2",
        "type": "flexdash container",
        "name": "Braisbane-Simoco7002",
        "title": "Braisbane-Simoco7002",
        "kind": "StdGrid",
        "fd_children": ",67e40ec147a30a51,6f083c9d58a66c8c,0635b5ab40850706,78abd039fc8c7011",
        "tab": "fef6c0f6d48841d6",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "5de79445aee2f018",
        "type": "flexdash tab",
        "name": "React",
        "icon": "mdi-toggle-switch",
        "title": "React",
        "fd_children": ",56206f55bcd5826e",
        "fd": "61e693942266360d",
        "info": "{\n  \"tabs\": [\n    {\n      \"name\": \"REACT_APP\",  // 你的 Tab 名称\n      \"icon\": \"mdi-react\",  // 可选图标\n      \"content\": [          // 直接定义 Tab 内容\n        {\n          \"type\": \"html\",\n          \"html\": \"<iframe src='https://localhost:3000' style='width:100%; height:100vh; border:none;'></iframe>\"\n        }\n      ]\n    }\n  ]\n}"
    },
    {
        "id": "4f2938e44607208b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "94aade6072488f3b",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "56206f55bcd5826e",
        "type": "flexdash container",
        "name": "React",
        "title": "React-Container",
        "kind": "StdGrid",
        "fd_children": "",
        "tab": "5de79445aee2f018",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "4fcaeac402284d31",
        "type": "flexdash dashboard",
        "port": 80,
        "ioOpts": "{}",
        "path": "/simco?theme=dark",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": false,
        "name": "simoco",
        "fd_children": ""
    },
    {
        "id": "d31c6e07c918a3d7",
        "type": "function",
        "z": "7d1f82b240d34d71",
        "g": "4a53d46b25bc2682",
        "name": "getAllEquipmentInfo",
        "func": "\nconst getInfo1= global.get(`globalSimoco3001Info`);\nconst alarm1 = global.get(\"globalSimoco3001Alarm\");\nconst equiptmentInfo1 = [getInfo1.equipNum,getInfo1.city,getInfo1.location,alarm1];\n\nconst getInfo2 = global.get(`globalSimoco3002Info`);\nconst alarm2 = global.get(\"globalSimoco3002Alarm\");\nconst equiptmentInfo2 = [getInfo2.equipNum, getInfo2.city, getInfo2.location, alarm2]\n\nconst getInfo3= global.get(`globalSimoco2001Info`);\nconst alarm3 = global.get(\"globalSimoco2002Alarm\");\nconst equiptmentInfo3 = [getInfo3.equipNum, getInfo3.city, getInfo3.location, alarm3];\n\nconst getInfo4 = global.get(`globalSimoco2002Info`);\nconst alarm4 = global.get(\"globalSimoco2002Alarm\");\nconst equiptmentInfo4 = [getInfo4.equipNum, getInfo4.city, getInfo4.location, alarm4]\n\nconst getInfo5 = global.get(`globalSimoco7001Info`);\nconst alarm5 = global.get(\"globalSimoco7001Alarm\");\nconst equiptmentInfo5 = [getInfo5.equipNum, getInfo5.city, getInfo5.location, alarm5]\n\nconst getInfo6 = global.get(`globalSimoco7002Info`);\nconst alarm6 = global.get(\"globalSimoco7002Alarm\");\nconst equiptmentInfo6 = [getInfo6.equipNum, getInfo6.city, getInfo6.location, alarm6]\n\nconst finalmsg = [equiptmentInfo1, equiptmentInfo2, equiptmentInfo3, equiptmentInfo4, equiptmentInfo5, equiptmentInfo6];\n// node.send(finalmsg)\nmsg.payload = finalmsg;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "cf38127b0f1242b4"
            ]
        ]
    },
    {
        "id": "4ae5f7bc06f4e087",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "4a53d46b25bc2682",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "d31c6e07c918a3d7"
            ]
        ]
    },
    {
        "id": "58796f9a219de9dd",
        "type": "flexdash custom",
        "z": "7d1f82b240d34d71",
        "g": "4a53d46b25bc2682",
        "name": "Device Distribution Map",
        "import_map": {
            "": ""
        },
        "sfc_source": "<template>\n  <v-card :loading=\"loading\" class=\"mx-auto my-12\" height=\"100%\" width=\"100%\">\n    <template v-slot:loader=\"{ isActive }\">\n      <v-progress-linear :active=\"isActive\" color=\"deep-purple\" height=\"4\" indeterminate></v-progress-linear>\n    </template>\n    <v-img cover height=\"300\" :src=\"AustraliaImage\"></v-img>\n  </v-card>\n</template>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    AustraliaImage: {\n      type: String,\n      default: \"./data/image/Australia.webp\",\n    },\n  },\n\n  data: () => ({\n    loading: false,\n    selection: 1,\n  }),\n\n  methods: {\n    reserve() {\n      this.loading = true;\n      setTimeout(() => (this.loading = false), 2000);\n    },\n    changeImage() {\n    this.AustraliaImage = \"./data/image/NewImage.webp\"; // 这里修改图片路径\n    },\n  },\n};\n</script>",
        "fd_container": "b55ad710670cabdb",
        "fd_cols": 3,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 710,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6cf70bad26da70ac",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "4a53d46b25bc2682",
        "name": "Australia map",
        "props": [
            {
                "p": "AustraliaImage",
                "v": "https://ontheworldmap.com/australia/australia-map-2.jpg",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "58796f9a219de9dd"
            ]
        ]
    },
    {
        "id": "cff0654c34ad0a47",
        "type": "flexdash custom",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device Info widget",
        "import_map": {
            "": ""
        },
        "sfc_source": "<template>\n  <v-card :loading=\"loading\" class=\"mx-auto my-12\" height=\"100%\" width=\"100%\">\n    <template v-slot:loader=\"{ isActive }\">\n      <v-progress-linear :active=\"isActive\" color=\"deep-purple\" height=\"4\" indeterminate></v-progress-linear>\n    </template>\n\n    <v-img cover height=\"300\" :src=\"deviceImage\"></v-img>\n\n    <v-card-item>\n      <v-card-title>{{ this.deviceName }} ({{ this.deviceNumber }})</v-card-title>\n      <div class=\"text-subtitle-1\">\n        <span class=\"me-1\">{{ this.deviceDescription }}</span>\n      </div>\n    </v-card-item>\n    <v-list disabled>\n      <v-list-item v-for=\"(item, i) in computedItems\" :key=\"i\" :value=\"item\" color=\"primary\" rounded=\"shaped\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <div class=\"d-flex align-center\">\n            <v-icon :icon=\"item.icon\" size=\"small\"></v-icon>\n            <v-list-item-title v-text=\"item.text\" class=\"pl-4\"></v-list-item-title>\n          </div>\n          <div class=\"text-subtitle-1\">{{ item.value }}</div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    deviceImage: {\n      type: String,\n      default: \"https://b3665216.smushcdn.com/3665216/wp-content/uploads/2024/09/Velocity-EC-800-%E2%80%93-New.png?lossy=2&strip=1&webp=1\"\n    },\n    deviceName: { type: String, default: \"Device\" },\n    deviceNumber: { type: String, default: 0, tip: \"device serial number\" },\n    deviceDescription: { type: String, default: \"Device\" },\n    deviceLocation: { type: String, default: \"\" },\n    deviceCreationTime: { type: String, default: 0 },\n    deviceHealthStatus: { type: String, default: \"Healthy\" },\n    deviceAlarmStatus: { type: String, default: \"false\" }\n  },\n\n  data: () => ({\n    loading: false,\n    selection: 1\n  }),\n\n  computed: {\n    computedItems() {\n      const items = [\n        {\n          text: \"Device Number\",\n          icon: \"mdi-devices\",\n          value: this.deviceNumber\n        },\n        {\n          text: \"Location\",\n          icon: \"mdi-map-marker\",\n          value: this.deviceLocation\n        },\n        {\n          text: \"Installation date\",\n          icon: \"mdi-calendar-range\",\n          value: this.deviceCreationTime\n        },\n        {\n          text: \"Health Status\",\n          icon: \"mdi-heart-pulse\",\n          value: this.deviceHealthStatus\n        },\n        {\n          text: \"Alarm Status\",\n          icon: \"mdi-alarm-light\",\n          value: this.deviceAlarmStatus\n        }\n      ];\n      return items;\n    }\n  },\n\n  methods: {\n    reserve() {\n      this.loading = true;\n\n      setTimeout(() => (this.loading = false), 2000);\n    }\n  }\n};\n</script>",
        "fd_container": "b55ad710670cabdb",
        "fd_cols": 3,
        "fd_rows": 6,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 330,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e15794d65b9ffe88",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "deviceName",
                "v": "Velocity EC-800",
                "vt": "str"
            },
            {
                "p": "deviceNumber",
                "v": "Simoco-3001",
                "vt": "str"
            },
            {
                "p": "deviceCreationTime",
                "v": "08/05/2025",
                "vt": "str"
            },
            {
                "p": "deviceLocation",
                "v": "Melbourne",
                "vt": "str"
            },
            {
                "p": "deviceHealthStatus",
                "v": "Healthy",
                "vt": "str"
            },
            {
                "p": "deviceDescription",
                "v": "This is an alarm device in Melbourne University",
                "vt": "str"
            },
            {
                "p": "deviceImage",
                "v": "https://b3665216.smushcdn.com/3665216/wp-content/uploads/2024/09/Velocity-EC-800-%E2%80%93-New.png?lossy=2&strip=1&webp=1",
                "vt": "str"
            },
            {
                "p": "deviceAlarmStatus",
                "v": "globalSimoco3001Alarm",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   deviceNumber: 20223,   deviceLocation: \"Melbourne\",   deviceCreationTime: \"2025-05-08\",   deviceHealthStatus: \"Healthy\", }",
        "payloadType": "str",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "cff0654c34ad0a47"
            ]
        ]
    },
    {
        "id": "7f6375a8f6eca578",
        "type": "flexdash custom",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device Info widget",
        "import_map": {
            "": ""
        },
        "sfc_source": "<template>\n  <v-card :loading=\"loading\" class=\"mx-auto my-12\" height=\"100%\" width=\"100%\">\n    <template v-slot:loader=\"{ isActive }\">\n      <v-progress-linear :active=\"isActive\" color=\"deep-purple\" height=\"4\" indeterminate></v-progress-linear>\n    </template>\n\n    <v-img cover height=\"300\" :src=\"deviceImage\"></v-img>\n\n    <v-card-item>\n      <v-card-title>{{ this.deviceName }} ({{ this.deviceNumber }})</v-card-title>\n      <div class=\"text-subtitle-1\">\n        <span class=\"me-1\">{{ this.deviceDescription }}</span>\n      </div>\n    </v-card-item>\n    <v-list disabled>\n      <v-list-item v-for=\"(item, i) in computedItems\" :key=\"i\" :value=\"item\" color=\"primary\" rounded=\"shaped\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <div class=\"d-flex align-center\">\n            <v-icon :icon=\"item.icon\" size=\"small\"></v-icon>\n            <v-list-item-title v-text=\"item.text\" class=\"pl-4\"></v-list-item-title>\n          </div>\n          <div class=\"text-subtitle-1\">{{ item.value }}</div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    deviceImage: {\n      type: String,\n      default: \"https://cdn.vuetifyjs.com/images/cards/cooking.png\"\n    },\n    deviceName: { type: String, default: \"Device\" },\n    deviceNumber: { type: String, default: 0, tip: \"device serial number\" },\n    deviceDescription: { type: String, default: \"Device\" },\n    deviceLocation: { type: String, default: \"\" },\n    deviceCreationTime: { type: String, default: 0 },\n    deviceHealthStatus: { type: String, default: \"Healthy\" },\n    deviceAlarmStatus: { type: String, default: \"false\" }\n  },\n\n  data: () => ({\n    loading: false,\n    selection: 1\n  }),\n\n  computed: {\n    computedItems() {\n      const items = [\n        {\n          text: \"Device Number\",\n          icon: \"mdi-devices\",\n          value: this.deviceNumber\n        },\n        {\n          text: \"Location\",\n          icon: \"mdi-map-marker\",\n          value: this.deviceLocation\n        },\n        {\n          text: \"Installation date\",\n          icon: \"mdi-calendar-range\",\n          value: this.deviceCreationTime\n        },\n        {\n          text: \"Health Status\",\n          icon: \"mdi-heart-pulse\",\n          value: this.deviceHealthStatus\n        },\n        {\n          text: \"Alarm Status\",\n          icon: \"mdi-alarm-light\",\n          value: this.deviceAlarmStatus\n        }\n      ];\n      return items;\n    }\n  },\n\n  methods: {\n    reserve() {\n      this.loading = true;\n\n      setTimeout(() => (this.loading = false), 2000);\n    }\n  }\n};\n</script>",
        "fd_container": "b55ad710670cabdb",
        "fd_cols": 3,
        "fd_rows": 6,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "bc712874f21174ac",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "deviceName",
                "v": "Velocity EC-800",
                "vt": "str"
            },
            {
                "p": "deviceNumber",
                "v": "Simoco-2001",
                "vt": "str"
            },
            {
                "p": "deviceCreationTime",
                "v": "07/05/2025",
                "vt": "str"
            },
            {
                "p": "deviceLocation",
                "v": "Sydney",
                "vt": "str"
            },
            {
                "p": "deviceHealthStatus",
                "v": "Healthy",
                "vt": "str"
            },
            {
                "p": "deviceDescription",
                "v": "This is an alarm device in Sydney University",
                "vt": "str"
            },
            {
                "p": "deviceImage",
                "v": "https://b3665216.smushcdn.com/3665216/wp-content/uploads/2024/09/Velocity-EC-800-%E2%80%93-New.png?lossy=2&strip=1&webp=1",
                "vt": "str"
            },
            {
                "p": "deviceAlarmStatus",
                "v": "globalSimoco2001Alarm",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "7f6375a8f6eca578"
            ]
        ]
    },
    {
        "id": "80e10f5157343e1a",
        "type": "flexdash custom",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device Info widget",
        "import_map": {
            "": ""
        },
        "sfc_source": "<template>\n  <v-card :loading=\"loading\" class=\"mx-auto my-12\" height=\"100%\" width=\"100%\">\n    <template v-slot:loader=\"{ isActive }\">\n      <v-progress-linear :active=\"isActive\" color=\"deep-purple\" height=\"4\" indeterminate></v-progress-linear>\n    </template>\n\n    <v-img cover height=\"300\" :src=\"deviceImage\"></v-img>\n\n    <v-card-item>\n      <v-card-title>{{ this.deviceName }} ({{ this.deviceNumber }})</v-card-title>\n      <div class=\"text-subtitle-1\">\n        <span class=\"me-1\">{{ this.deviceDescription }}</span>\n      </div>\n    </v-card-item>\n    <v-list disabled>\n      <v-list-item v-for=\"(item, i) in computedItems\" :key=\"i\" :value=\"item\" color=\"primary\" rounded=\"shaped\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <div class=\"d-flex align-center\">\n            <v-icon :icon=\"item.icon\" size=\"small\"></v-icon>\n            <v-list-item-title v-text=\"item.text\" class=\"pl-4\"></v-list-item-title>\n          </div>\n          <div class=\"text-subtitle-1\">{{ item.value }}</div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    deviceImage: {\n      type: String,\n      default: \"https://cdn.vuetifyjs.com/images/cards/cooking.png\"\n    },\n    deviceName: { type: String, default: \"Device\" },\n    deviceNumber: { type: String, default: 0, tip: \"device serial number\" },\n    deviceDescription: { type: String, default: \"Device\" },\n    deviceLocation: { type: String, default: \"\" },\n    deviceCreationTime: { type: String, default: 0 },\n    deviceHealthStatus: { type: String, default: \"Healthy\" },\n    deviceAlarmStatus: { type: String, default: \"false\" }\n  },\n\n  data: () => ({\n    loading: false,\n    selection: 1\n  }),\n\n  computed: {\n    computedItems() {\n      const items = [\n        {\n          text: \"Device Number\",\n          icon: \"mdi-devices\",\n          value: this.deviceNumber\n        },\n        {\n          text: \"Location\",\n          icon: \"mdi-map-marker\",\n          value: this.deviceLocation\n        },\n        {\n          text: \"Installation date\",\n          icon: \"mdi-calendar-range\",\n          value: this.deviceCreationTime\n        },\n        {\n          text: \"Health Status\",\n          icon: \"mdi-heart-pulse\",\n          value: this.deviceHealthStatus\n        },\n        {\n          text: \"Alarm Status\",\n          icon: \"mdi-alarm-light\",\n          value: this.deviceAlarmStatus\n        }\n      ];\n      return items;\n    }\n  },\n\n  methods: {\n    reserve() {\n      this.loading = true;\n\n      setTimeout(() => (this.loading = false), 2000);\n    }\n  }\n};\n</script>",
        "fd_container": "b55ad710670cabdb",
        "fd_cols": 3,
        "fd_rows": 6,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 330,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "2a296ec9266ecc2f",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "2eaa55a3838d35fd",
        "name": "Device 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "deviceName",
                "v": "Velocity EC-800",
                "vt": "str"
            },
            {
                "p": "deviceNumber",
                "v": "Simoco-7001",
                "vt": "str"
            },
            {
                "p": "deviceCreationTime",
                "v": "06/05/2025",
                "vt": "str"
            },
            {
                "p": "deviceLocation",
                "v": "Brisbane",
                "vt": "str"
            },
            {
                "p": "deviceHealthStatus",
                "v": "Need Check",
                "vt": "str"
            },
            {
                "p": "deviceDescription",
                "v": "This is an alarm device in Brisbane",
                "vt": "str"
            },
            {
                "p": "deviceImage",
                "v": "https://b3665216.smushcdn.com/3665216/wp-content/uploads/2024/09/Velocity-EC-800-%E2%80%93-New.png?lossy=2&strip=1&webp=1",
                "vt": "str"
            },
            {
                "p": "deviceAlarmStatus",
                "v": "globalSimoco7001Alarm",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "80e10f5157343e1a"
            ]
        ]
    },
    {
        "id": "1cfcba80295c6b48",
        "type": "inject",
        "z": "7d1f82b240d34d71",
        "g": "291b99c717285aa1",
        "name": "Inject popup data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "icon",
                "v": "party-popper",
                "vt": "str"
            },
            {
                "p": "title",
                "v": "\"Pop up information title\"",
                "vt": "str"
            },
            {
                "p": "text",
                "v": "Simoco-7001 now is Alarming,Please inform the related ones!",
                "vt": "str"
            },
            {
                "p": "dialogHeader",
                "v": "Health information about devices",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 540,
        "wires": [
            [
                "afd0c6822973e96f"
            ]
        ]
    },
    {
        "id": "bc01faa414afd366",
        "type": "function",
        "z": "7d1f82b240d34d71",
        "g": "291b99c717285aa1",
        "name": "show popup",
        "func": "const showPopupIndicator = global.get(\"globalSimoco7001Alarm\");\nif (showPopupIndicator){\n    msg.showPopup = true;\n}else{\n    msg.showPopup = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "afd0c6822973e96f"
            ]
        ]
    },
    {
        "id": "eac0707239ef0c69",
        "type": "delay",
        "z": "7d1f82b240d34d71",
        "g": "291b99c717285aa1",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 100,
        "y": 600,
        "wires": [
            [
                "bc01faa414afd366"
            ]
        ]
    },
    {
        "id": "afd0c6822973e96f",
        "type": "flexdash custom",
        "z": "7d1f82b240d34d71",
        "d": true,
        "g": "291b99c717285aa1",
        "name": "Alarm popup",
        "sfc_source": "<template>\n  <div class=\"popupbutton d-flex align-center justify-center\">\n    <v-btn large dense class=\"ma-auto\" max-width=\"95%\" v-bind=\"bindings\" @click=\"clickEv\">\n      <v-icon :large=\"!title\" v-if=\"icon\">mdi-{{ icon }}</v-icon> <span>{{ dialogHeader }}</span>\n    </v-btn>\n\n    <!-- dialog box to view the widget's pop-up text full-page -->\n    <v-dialog v-model=\"show_popup\" width=\"80%\" max-width=\"100ex\">\n      <v-card class=\"d-flex flex-column height100\">\n        <v-card-title class=\"d-flex align-baseline width100\">\n          <span>{{ dialogHeader }}</span>\n          <v-spacer></v-spacer>\n          <v-btn elevation=0 icon @click=\"show_popup = false\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text class=\"flex-grow-1\">\n          <div class=\"pt-1\" style=\"width:100%\">{{ text }}</div>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n\n  </div>\n</template>\n\n<script scoped>\n  // import md from '/src/components/md.vue'\n\nexport default {\n    name: 'PopupButton',\n\n    help: `Button to pop-up a mardown text panel.\n  Pressing the button pops-up a mardown panel, useful for help or other information.\n  The button may contain an icon and/or a title string and is centered in the widget.`,\n\n    props: {\n        enabled: { default: true },\n        color: {type: String,  default: \"primary\" },\n        text: { type: String, default: \"\", tip: \"markdown text to show in pop-up\" },\n        icon: { type: String, default: null, tip: \"material-design-icon name\" },\n        title: { type: String, default: 'Information' },\n        dialogHeader: { type: String, default: 'Information' },\n        showPopup: { type: Boolean, default: false }\n    },\n\n    data() {\n        return {\n            show_popup: this.showPopup,\n        }\n    },\n\n    computed: {\n        // actual bindings passed into v-btn\n        bindings() {\n            console.log(this.dialogHeader, \"this. dialogHeader\",this.show_popup, this.text)\n            return {\n                disabled: !this.enabled,\n                color: this.color,\n            }\n        },\n    },\n\n    methods: {\n        clickEv(ev) { \n            console.log(this.title, \"this. show_popup\",this.show_popup)\n\n            this.show_popup = !this.show_popup \n        }\n    },\n\n}\n</script>\n\n<style scoped>\n  .popupbutton {\n    height: 100%;\n  }\n</style>",
        "fd_container": "",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 450,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cf38127b0f1242b4",
        "type": "fd-simple-table",
        "z": "7d1f82b240d34d71",
        "g": "4a53d46b25bc2682",
        "fd_container": "b55ad710670cabdb",
        "fd_cols": "6",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Simco Monitor Table",
        "title": "Device Monitor Table",
        "popup_info": "",
        "data": "",
        "columns": "null",
        "labels": "[\"Equipment Num\",\"City\",\"Location\",\"Alarm\"]",
        "align": null,
        "click": null,
        "sort": null,
        "x": 700,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "793612058d6a039b",
        "type": "inject",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "5f6f375bc7c84657"
            ]
        ]
    },
    {
        "id": "5f6f375bc7c84657",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Melbourne-Simoco3001,a random error\", msg);\n   global.set(\"globalSimoco3001Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "246940e1f1272419",
        "type": "delay",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 520,
        "wires": [
            [
                "5f6f375bc7c84657"
            ]
        ]
    },
    {
        "id": "9d122703e2521fa1",
        "type": "catch",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "scope": [
            "5f6f375bc7c84657"
        ],
        "uncaught": false,
        "x": 110,
        "y": 520,
        "wires": [
            [
                "246940e1f1272419",
                "c67c5af0aec50f1c"
            ]
        ]
    },
    {
        "id": "c67c5af0aec50f1c",
        "type": "debug",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 260,
        "y": 580,
        "wires": []
    },
    {
        "id": "c39562961a6fc182",
        "type": "inject",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "Ringwood",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Melbourne",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "37.8136",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "144.9631",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "Australia",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco3001",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "b5e69b05079a9f31"
            ]
        ]
    },
    {
        "id": "f4c1d472e0ceec89",
        "type": "debug",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 60,
        "wires": []
    },
    {
        "id": "b5e69b05079a9f31",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "getBasicInfo",
        "func": "// node.warn(msg);\n// const basicInfo ={city:msg.city,country:msg.country,\n//                   longitude:msg.lognitude,latitude:msg.latitude,\n//                   equipNum:msg.equipNum,location:msg.location};\n// msg = basicInfo;\nconst {equipNum} = msg;\nglobal.set(`global${equipNum}Info`,msg);\nconst getInfo= global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "f4c1d472e0ceec89"
            ]
        ]
    },
    {
        "id": "c9a92a2c0b8af0fd",
        "type": "inject",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "20",
        "payloadType": "num",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "45a144db854e98bd"
            ]
        ]
    },
    {
        "id": "859988116300708c",
        "type": "inject",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "80",
        "payloadType": "num",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "57974a2ef4d7851a"
            ]
        ]
    },
    {
        "id": "29b46564a5d9ada6",
        "type": "inject",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "20",
        "payloadType": "num",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "65ef0d87abb3708e"
            ]
        ]
    },
    {
        "id": "349d3e93ecbec99b",
        "type": "switch",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "678e8917bc34968b"
            ],
            [
                "a9eff5ed481a78ac"
            ],
            [
                "e88d7db3c1c3f62b",
                "6c94903ba2c673aa"
            ]
        ]
    },
    {
        "id": "45a144db854e98bd",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco3001Alarm\", true);\n} else {\n  global.set(\"globalSimoco3001Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "349d3e93ecbec99b"
            ]
        ]
    },
    {
        "id": "57974a2ef4d7851a",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 0) {\n  count = msg.payload;\n} else {\n  count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "349d3e93ecbec99b"
            ]
        ]
    },
    {
        "id": "65ef0d87abb3708e",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "349d3e93ecbec99b"
            ]
        ]
    },
    {
        "id": "6c94903ba2c673aa",
        "type": "debug",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "9efabd76f7624b38",
        "type": "change",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "09bda9de7f30b766",
        "type": "function",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 565,
        "y": 560,
        "wires": [
            [
                "7de1b007f9dd0650"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "678e8917bc34968b",
        "type": "fd-gauge",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "fd_container": "eec937d7b14488a6",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "e88d7db3c1c3f62b",
        "type": "fd-gauge",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "fd_container": "eec937d7b14488a6",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "a9eff5ed481a78ac",
        "type": "fd-gauge",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "fd_container": "eec937d7b14488a6",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "7de1b007f9dd0650",
        "type": "fd-toggle",
        "z": "7ca0877022020e2a",
        "g": "c5bebc746873d273",
        "fd_container": "eec937d7b14488a6",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 590,
        "y": 480,
        "wires": [
            [
                "9efabd76f7624b38",
                "09bda9de7f30b766"
            ]
        ]
    },
    {
        "id": "27e61f12.c1a15",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "d7d08440.31b678"
            ]
        ]
    },
    {
        "id": "d7d08440.31b678",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Melbourne-Simoco3002,a random error\", msg);\n   global.set(\"globalSimoco3002Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "f22b1e9a.5d89b"
            ]
        ]
    },
    {
        "id": "f22b1e9a.5d89b",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "2166290d.98d736",
        "type": "delay",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "d7d08440.31b678"
            ]
        ]
    },
    {
        "id": "139b836e.7950ed",
        "type": "catch",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "scope": [
            "d7d08440.31b678"
        ],
        "uncaught": false,
        "x": 130,
        "y": 520,
        "wires": [
            [
                "2166290d.98d736",
                "9c8ab214.0ecaa"
            ]
        ]
    },
    {
        "id": "9c8ab214.0ecaa",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 280,
        "y": 580,
        "wires": []
    },
    {
        "id": "4acfcc8a53794509",
        "type": "change",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b71f1b12fd7a1d9c",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 620,
        "wires": [
            [
                "30a25415e9358e70"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "1ecc45dadc322c11",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "Malvern",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Melbourne",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "37.8136",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "144.9631",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "Australia",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco3002",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "95b13489a2c83688"
            ]
        ]
    },
    {
        "id": "4d23673ff2862391",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "95b13489a2c83688",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "getBasicInfo",
        "func": "// node.warn(msg);\n// const basicInfo ={city:msg.city,country:msg.country,\n//                   longitude:msg.lognitude,latitude:msg.latitude,\n//                   equipNum:msg.equipNum,location:msg.location};\n// msg = basicInfo;\nconst {equipNum} = msg;\nglobal.set(`global${equipNum}Info`,msg);\nconst getInfo= global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 60,
        "wires": [
            [
                "4d23673ff2862391"
            ]
        ]
    },
    {
        "id": "3571a66fa779c1d7",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "5",
        "payloadType": "num",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "edadc02dda58e2c2"
            ]
        ]
    },
    {
        "id": "91346635a4bdb1d9",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "99",
        "payloadType": "num",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "8e412ebd2dcd9e64"
            ]
        ]
    },
    {
        "id": "1287cc89f61ec161",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "10",
        "payloadType": "num",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "85e51fd750d91956"
            ]
        ]
    },
    {
        "id": "d7fedd62a118f4a6",
        "type": "switch",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "8738856eb139723d"
            ],
            [
                "0eedf40811743459"
            ],
            [
                "af8c030c62c22003"
            ]
        ]
    },
    {
        "id": "edadc02dda58e2c2",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco3002Alarm\", true);\n} else {\n  global.set(\"globalSimoco3002Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "d7fedd62a118f4a6"
            ]
        ]
    },
    {
        "id": "8e412ebd2dcd9e64",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 0) {\n  count = msg.payload;\n} else {\n  count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "d7fedd62a118f4a6"
            ]
        ]
    },
    {
        "id": "85e51fd750d91956",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "d7fedd62a118f4a6"
            ]
        ]
    },
    {
        "id": "54f79f07dc20c956",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "Refresh per hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "Refresh per hour",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "0c92723a3a3424a5",
                "fb9282a00e71c234"
            ]
        ]
    },
    {
        "id": "0c92723a3a3424a5",
        "type": "openweathermap",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "Current Weather",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Melbourne",
        "country": "AU",
        "language": "en",
        "x": 380,
        "y": 740,
        "wires": [
            [
                "e0c9c9cab4044efa"
            ]
        ]
    },
    {
        "id": "fb9282a00e71c234",
        "type": "openweathermap",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "5 Day Forecast",
        "wtype": "forecast",
        "lon": "",
        "lat": "",
        "city": "Melbourne",
        "country": "AU",
        "language": "en",
        "x": 380,
        "y": 920,
        "wires": [
            [
                "9be9253cea9aa492"
            ]
        ]
    },
    {
        "id": "c1fdc87d4ab8e430",
        "type": "flexdash custom",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "weather report widget",
        "sfc_source": "<template>\n  <v-card class=\"mx-auto\" max-width=\"420\" width=\"100%\" height=\"100%\">\n    <v-card-item :title=\"city\">\n      <template v-if=\"isExtremeWether\" v-slot:subtitle>\n        <v-icon icon=\"mdi-alert\" size=\"18\" color=\"error\" class=\"me-1 pb-1\"></v-icon>\n        Extreme Weather Alert\n      </template>\n      <template v-else v-slot:subtitle>\n        {{ weather }}\n      </template>\n    </v-card-item>\n\n    <v-card-text class=\"py-0\">\n      <v-row align=\"center\" no-gutters>\n        <v-col class=\"text-h3\" cols=\"6\"> {{ tempc }} &deg;C </v-col>\n\n        <v-col cols=\"6\" class=\"text-right\">\n          <v-icon color=\"error\" :icon=\"customWeatherIcon\" size=\"88\"></v-icon>\n        </v-col>\n      </v-row>\n    </v-card-text>\n\n    <div class=\"d-flex py-3 justify-space-between\">\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-weather-windy\">\n        <v-list-item-subtitle>{{ windspeed }} m/s</v-list-item-subtitle>\n      </v-list-item>\n\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-water-percent\">\n        <v-list-item-subtitle>{{ humidity }}%</v-list-item-subtitle>\n      </v-list-item>\n    </div>\n\n    <div class=\"py-4\">\n      <v-slider v-model=\"selectedDay\" :max=\"5\" :step=\"1\" :ticks=\"weatherFullReportLabels\" class=\"mx-4\" color=\"primary\"\n        density=\"compact\" hide-details show-ticks=\"always\" thumb-size=\"8\" @click=\"sliderClickHander\"></v-slider>\n    </div>\n\n    <v-list class=\"weather-forecast-5-days bg-transparent\">\n      <v-list-item v-for=\"item in weatherFullReportInDays\" :key=\"item.day\" :value=\"item\" class=\"py-2\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <span class=\"text-subtitle-1\">{{ item.day }}</span>\n\n          <div class=\"weather-condition d-flex align-center justify-space-between\">\n            <v-list-item-title>\n              <v-icon :icon=\"item.icon\" color=\"error\" size=\"small\"></v-icon>\n              <span class=\"pl-4\">{{ item.temp }}</span>\n            </v-list-item-title>\n            <div class=\"text-body-2\">{{ item.weatherDescription }}</div>\n          </div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<style scoped>\n  .weather-forecast-5-days .weather-condition {\n    flex-basis: 78%;\n  }\n</style>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    weatherFullReportLabels: {\n      type: Object,\n      default: {\n        0: \"Sun\",\n        1: \"Mon\",\n        2: \"Tue\",\n        3: \"Wes\",\n        4: \"Thu\",\n        5: \"Fri\",\n      },\n    },\n    weatherFullReportInDays: {\n      type: Array,\n      default: [\n        {\n          day: \"Sun\",\n          icon: \"mdi-weather-sunny\",\n          temp: \"18.01 / 16.92°C\",\n          temp_min: 16.92,\n          temp_max: 18.01,\n          weatherDescription: \"clear sky\",\n          weather: \"Clear\",\n        },\n      ],\n    },\n    city: { type: String, default: \"Melbourne\" },\n    weather: { type: String, default: \"\" },\n    weatherDetail: { type: String, default: \"\" },\n    windspeed: { type: Number, default: 0, tip: \"wind speed\" },\n    humidity: { type: Number, default: 0 },\n    tempc: { type: Number, default: 0 },\n    temp_maxc: { type: Number, default: 0 },\n    temp_min: { type: Number, default: 0 },\n  },\n\n  data: () => ({}),\n\n  methods: {\n    sliderClickHander() {\n      console.log(this.selectedDay);\n    },\n  },\n\n  computed: {\n    selectedDay() {\n      return new Date().getDay() - 1;\n    },\n    isExtremeWether() {\n      return this.tempc > 35 || this.tempc < 10;\n    },\n    customWeatherIcon() {\n      let weatherIcon = \"\";\n      switch (this.weather) {\n        case \"Clouds\":\n          weatherIcon = \"mdi-weather-cloudy\";\n          break;\n        case \"Snow\":\n          weatherIcon = \"mdi-weather-snowy\";\n          break;\n        case \"Rain\":\n          weatherIcon = \"mdi-weather-rainy\";\n          break;\n        case \"Clear\":\n          weatherIcon = \"mdi-weather-sunny\";\n          break;\n        case \"Wind\":\n          weatherIcon = \"mdi-weather-windy\";\n          break;\n        default:\n          weatherIcon = \"mdi-weather-sunny\";\n      }\n      return weatherIcon;\n    },\n  },\n};\n</script>",
        "fd_container": "e835914f613f0649",
        "fd_cols": 3,
        "fd_rows": 7,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 1100,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e0c9c9cab4044efa",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "transform weather report data",
        "func": "msg.city = msg.payload.location;\nmsg.weather = msg.payload.weather;\nmsg.weatherDetail = msg.payload.detail;\nmsg.windspeed = msg.payload.windspeed;\nmsg.humidity = msg.payload.humidity;\nmsg.tempc = msg.payload.tempc;\nmsg.temp_maxc = msg.payload.temp_maxc;\nmsg.temp_min = msg.payload.temp_min;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 720,
        "wires": [
            [
                "c1fdc87d4ab8e430",
                "b039767b3b60fd7f"
            ]
        ]
    },
    {
        "id": "9be9253cea9aa492",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "transform forecast data",
        "func": "/*\nUsed for weather trend time plot\n### Public method\nreturn type: Array\n[\n  [ 1702774800, 18.01 ], [ 1702785600, 17.23 ],\n  [ 1702796400, 16.59 ], [ 1702807200, 19.67 ],\n]\n*/\nfunction transformWeatherResponseForWeatherTrendsInDays(fullDataInDays) {\n  const transformedData = fullDataInDays.map(\n    transformWeatherResponseToTimestampArrary\n  );\n  return transformedData;\n}\n\n/*\nUsed for weather 5 days forecast full report\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  ...\n]\n*/\nfunction getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays) {\n  const maxMinTempBelongsToOneDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  return transformForecastData(maxMinTempBelongsToOneDay);\n}\n\n/*\nUsed for weather 5 days full report labels\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \nexpected return type: Object{\n      \"0\": \"Sun\",\n      \"1\": \"Mon\",\n      \"2\": \"Tue\",\n      \"3\": \"Wes\",\n      \"4\": \"Thu\",\n      \"5\": \"Fri\"\n    }\n*/\nfunction getWeatherLabelsForDifferentDays(fullDataInDays) {\n  const weatherDataInObjectForEachDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  const labels = Object.keys(weatherDataInObjectForEachDay).reduce(\n    (acc, day, currentIndex) => {\n      acc[currentIndex] = day;\n      return acc;\n    },\n    {}\n  );\n  return labels;\n}\n\n//Private method\nfunction transformWeatherResponseToTimestampArrary(item) {\n  const weatherDateTime = item.dt_txt;\n  const weatherTimeStamp = new Date(weatherDateTime).valueOf() / 1000;\n  const weatherTempFeelsLike = item.main.feels_like;\n  const weatherTempMin = item.main.temp_min;\n  const weatherTempMax = item.main.temp_max;\n  const weatherTemp = item.main.temp;\n  return [weatherTimeStamp, weatherTemp];\n}\n\n/*\nPrivate method\nexpect input type: FullDataInDays\n\nexpected return type:\nObject {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  },\n  Mon: {\n    max: 31.17,\n    min: 15.68,\n    weather: \"Clouds\",\n    weatherDescription: \"scattered clouds\",\n    weatherDateTime: \"2023-12-17 15:00:00z\"\n  }\n};\n*/\nfunction findOutMaxMinTempBelongsToOneDay(fullDataInDays) {\n  const daysMapping = {\n    0: \"Sun\",\n    1: \"Mon\",\n    2: \"Tue\",\n    3: \"Wed\",\n    4: \"Thu\",\n    5: \"Fri\",\n    6: \"Sat\"\n  };\n\n  const dataGroupInDifferentDays = fullDataInDays.reduce((acc, item) => {\n    //add timezone to date\n    const weatherDateTime = item.dt_txt + \"z\";\n    const weatherDayInNumber = new Date(weatherDateTime).getDay();\n    const dayName = daysMapping[weatherDayInNumber];\n    if (acc[dayName] === undefined) {\n      acc[dayName] = {\n        max: item.main.temp_max,\n        min: item.main.temp_min,\n        weather: item.weather[0].main,\n        weatherDescription: item.weather[0].description,\n        weatherDateTime\n      };\n    } else {\n      if (item.main.temp_max > acc[dayName].max) {\n        acc[dayName].max = item.main.temp_max;\n      }\n\n      if (item.main.temp_min < acc[dayName].min) {\n        acc[dayName].min = item.main.temp_min;\n      }\n    }\n    return acc;\n  }, {});\n\n  return dataGroupInDifferentDays;\n}\n\n//Private method\nfunction customWeatherIcon(weather) {\n  let weatherIcon = \"\";\n  switch (weather) {\n    case \"Clouds\":\n      weatherIcon = \"mdi-weather-cloudy\";\n      break;\n    case \"Snow\":\n      weatherIcon = \"mdi-weather-snowy\";\n      break;\n    case \"Rain\":\n      weatherIcon = \"mdi-weather-rainy\";\n      break;\n    case \"Clear\":\n      weatherIcon = \"mdi-weather-sunny\";\n      break;\n    case \"Wind\":\n      weatherIcon = \"mdi-weather-windy\";\n      break;\n    default:\n      weatherIcon = \"mdi-weather-sunny\";\n  }\n  return weatherIcon;\n}\n\n/*\n//Private method\nexpected input type: Object {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  } ....\n} \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  {\n    day: 'Mon',\n    icon: 'mdi-weather-cloudy',\n    temp: '31.17 / 15.68°C',\n    temp_min: 15.68,\n    temp_max: 31.17,\n    weatherDescription: 'scattered clouds',\n    weather: 'Clouds'\n  }\n]\n*/\nfunction transformForecastData(originalTempDataWithMinMax) {\n  return Object.keys(originalTempDataWithMinMax).map((day) => {\n    const icon = customWeatherIcon(originalTempDataWithMinMax[day].weather);\n    const temp_min = originalTempDataWithMinMax[day].min;\n    const temp_max = originalTempDataWithMinMax[day].max;\n    const temp = temp_max + \" / \" + temp_min + \"\\u00B0C\";\n    return {\n      day,\n      icon,\n      temp,\n      temp_min,\n      temp_max,\n      weatherDescription: originalTempDataWithMinMax[day].weatherDescription,\n      weather: originalTempDataWithMinMax[day].weather\n    };\n  });\n}\n\n/*\nNode-Red specific code\nconst fullDataInDays = msg.payload;\n*/\nconst fullDataInDays = msg.payload;\n// const fullDataInDays = fiveDaysMelboure;\nconst weatherSeriesData =\n  transformWeatherResponseForWeatherTrendsInDays(fullDataInDays);\nconst weatherFullReportInDays =\n  getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays);\n\nconst weatherFullReportLabels =\n  getWeatherLabelsForDifferentDays(fullDataInDays);\n\nconsole.log(\"weatherSeriesData\", weatherSeriesData);\nconsole.log(\"weatherFullReportInDays\", weatherFullReportInDays);\nconsole.log(\"weatherFullReportLabels\", weatherFullReportLabels);\n\n/*\nNode-Red specific code\n*/\nmsg = {\n  payload: {\n    weatherSeriesData,\n    weatherFullReportInDays,\n    weatherFullReportLabels\n  },\n  city: msg.data.city.name\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 920,
        "wires": [
            [
                "e5ebabf8867f2253",
                "94aa2ccdb054f6d3",
                "cf91c4ea3dff993b"
            ]
        ]
    },
    {
        "id": "e5ebabf8867f2253",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "filter series data",
        "func": "msg = {\n    payload: msg.payload.weatherSeriesData,\n    title:  msg.city+ \" 5 days forecast\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1020,
        "wires": [
            [
                "ac1050bdfb296f26"
            ]
        ]
    },
    {
        "id": "94aa2ccdb054f6d3",
        "type": "function",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "filter full report data",
        "func": "msg.weatherFullReportInDays = msg.payload.weatherFullReportInDays;\nmsg.weatherFullReportLabels = msg.payload.weatherFullReportLabels;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 860,
        "wires": [
            [
                "00bc66b542a4842f",
                "c1fdc87d4ab8e430"
            ]
        ]
    },
    {
        "id": "ce6c68ed96f7201a",
        "type": "inject",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "Inject other data for 5 days forecast",
        "props": [
            {
                "p": "widths",
                "v": "[3]",
                "vt": "json"
            },
            {
                "p": "span_gaps",
                "v": "[true]",
                "vt": "json"
            },
            {
                "p": "colors",
                "v": "[\"orange\"]",
                "vt": "json"
            },
            {
                "p": "labels",
                "v": "[\"Temperature\"]",
                "vt": "str"
            },
            {
                "p": "left_unit",
                "v": "\\u00B0C",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "ac1050bdfb296f26"
            ]
        ]
    },
    {
        "id": "b039767b3b60fd7f",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "debug 31",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 800,
        "wires": []
    },
    {
        "id": "cf91c4ea3dff993b",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 840,
        "wires": []
    },
    {
        "id": "00bc66b542a4842f",
        "type": "debug",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "name": "debug 35",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 860,
        "wires": []
    },
    {
        "id": "8738856eb139723d",
        "type": "fd-gauge",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "fd_container": "e835914f613f0649",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "°C",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "af8c030c62c22003",
        "type": "fd-gauge",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "fd_container": "e835914f613f0649",
        "fd_cols": 3,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "0eedf40811743459",
        "type": "fd-gauge",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "fd_container": "e835914f613f0649",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "ac1050bdfb296f26",
        "type": "fd-time-plot",
        "z": "ef8739be854896a4",
        "g": "80eb3268ec88e507",
        "fd_container": "e835914f613f0649",
        "fd_cols": "6",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "5 days forecast trend widget",
        "title": "5 days forecast",
        "popup_info": "",
        "data": "",
        "labels": [],
        "colors": [],
        "axes": [],
        "widths": [],
        "points": null,
        "span_gaps": [],
        "left_unit": "",
        "left_min": null,
        "left_max": null,
        "left_decimals": 1,
        "left_isoprefix": false,
        "left_log": false,
        "right_unit": "",
        "right_min": null,
        "right_max": null,
        "right_decimals": 1,
        "right_isoprefix": false,
        "right_log": false,
        "reverse_legend": false,
        "x": 1140,
        "y": 1100,
        "wires": []
    },
    {
        "id": "30a25415e9358e70",
        "type": "fd-toggle",
        "z": "ef8739be854896a4",
        "g": "f81078994e7bf9a5",
        "fd_container": "e835914f613f0649",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 650,
        "y": 540,
        "wires": [
            [
                "4acfcc8a53794509",
                "b71f1b12fd7a1d9c"
            ]
        ]
    },
    {
        "id": "fced9681f082291f",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "250fc877872c999f"
            ]
        ]
    },
    {
        "id": "250fc877872c999f",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Sydney-Simoco2001,a random error\", msg);\n   global.set(\"globalSimoco2001Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "13229b54da88a21b"
            ]
        ]
    },
    {
        "id": "13229b54da88a21b",
        "type": "debug",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 460,
        "wires": []
    },
    {
        "id": "fc2ea173d343dfdf",
        "type": "delay",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 520,
        "wires": [
            [
                "250fc877872c999f"
            ]
        ]
    },
    {
        "id": "bc549d3921ab095e",
        "type": "catch",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "scope": [
            "250fc877872c999f"
        ],
        "uncaught": false,
        "x": 110,
        "y": 520,
        "wires": [
            [
                "fc2ea173d343dfdf",
                "fdb9d88158dd8f79"
            ]
        ]
    },
    {
        "id": "fdb9d88158dd8f79",
        "type": "debug",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 260,
        "y": 580,
        "wires": []
    },
    {
        "id": "077c54ddd8250ed3",
        "type": "change",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "c8aee0967669f6d1",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 620,
        "wires": [
            [
                "f6085dedb2b19ae3"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "8cef0e8d3cb86d84",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "BurnWood",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Sydney",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "33.8688",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "151.2093",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "Australia",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco2001",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "7c24503dd37391b5"
            ]
        ]
    },
    {
        "id": "c093056e67d4a4dc",
        "type": "debug",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 60,
        "wires": []
    },
    {
        "id": "7c24503dd37391b5",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "getBasicInfo",
        "func": "// node.warn(msg);\n// const basicInfo ={city:msg.city,country:msg.country,\n//                   longitude:msg.lognitude,latitude:msg.latitude,\n//                   equipNum:msg.equipNum,location:msg.location};\n// msg = basicInfo;\nconst {equipNum} = msg;\nglobal.set(`global${equipNum}Info`,msg);\nconst getInfo= global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "c093056e67d4a4dc"
            ]
        ]
    },
    {
        "id": "3a101d79bb9cb238",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "752e6fd71c0c5086"
            ]
        ]
    },
    {
        "id": "32c3264fa61e24bd",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "45",
        "payloadType": "num",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "607f80762a961c8e"
            ]
        ]
    },
    {
        "id": "da1d769a12d944db",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "45",
        "payloadType": "num",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "cc9b2c9c876a3228"
            ]
        ]
    },
    {
        "id": "39a8d2b34bf80b3c",
        "type": "switch",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "0d5e9360b335a9d2"
            ],
            [
                "9639ec1088f6125e"
            ],
            [
                "fd67ac174e8d3345"
            ]
        ]
    },
    {
        "id": "752e6fd71c0c5086",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco2001Alarm\", true);\n} else {\n  global.set(\"globalSimoco2001Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "39a8d2b34bf80b3c"
            ]
        ]
    },
    {
        "id": "607f80762a961c8e",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 0) {\n  count = msg.payload;\n} else {\n  count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "39a8d2b34bf80b3c"
            ]
        ]
    },
    {
        "id": "cc9b2c9c876a3228",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "39a8d2b34bf80b3c"
            ]
        ]
    },
    {
        "id": "236ef0baa700e6ac",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "Refresh per hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "Refresh per hour",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "90ce23bfe53567a6",
                "83f285170395537d"
            ]
        ]
    },
    {
        "id": "90ce23bfe53567a6",
        "type": "openweathermap",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "Current Weather",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Sydney",
        "country": "AU",
        "language": "en",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "14b7401b2c81c81a"
            ]
        ]
    },
    {
        "id": "83f285170395537d",
        "type": "openweathermap",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "5 Day Forecast",
        "wtype": "forecast",
        "lon": "",
        "lat": "",
        "city": "Sydney",
        "country": "AU",
        "language": "en",
        "x": 360,
        "y": 920,
        "wires": [
            [
                "c41971c1e7b65928"
            ]
        ]
    },
    {
        "id": "b21b2799754a0e9c",
        "type": "flexdash custom",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "weather report widget",
        "sfc_source": "<template>\n  <v-card class=\"mx-auto\" max-width=\"420\" width=\"100%\" height=\"100%\">\n    <v-card-item :title=\"city\">\n      <template v-if=\"isExtremeWether\" v-slot:subtitle>\n        <v-icon icon=\"mdi-alert\" size=\"18\" color=\"error\" class=\"me-1 pb-1\"></v-icon>\n        Extreme Weather Alert\n      </template>\n      <template v-else v-slot:subtitle>\n        {{ weather }}\n      </template>\n    </v-card-item>\n\n    <v-card-text class=\"py-0\">\n      <v-row align=\"center\" no-gutters>\n        <v-col class=\"text-h3\" cols=\"6\"> {{ tempc }} &deg;C </v-col>\n\n        <v-col cols=\"6\" class=\"text-right\">\n          <v-icon color=\"error\" :icon=\"customWeatherIcon\" size=\"88\"></v-icon>\n        </v-col>\n      </v-row>\n    </v-card-text>\n\n    <div class=\"d-flex py-3 justify-space-between\">\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-weather-windy\">\n        <v-list-item-subtitle>{{ windspeed }} m/s</v-list-item-subtitle>\n      </v-list-item>\n\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-water-percent\">\n        <v-list-item-subtitle>{{ humidity }}%</v-list-item-subtitle>\n      </v-list-item>\n    </div>\n\n    <div class=\"py-4\">\n      <v-slider v-model=\"selectedDay\" :max=\"5\" :step=\"1\" :ticks=\"weatherFullReportLabels\" class=\"mx-4\" color=\"primary\"\n        density=\"compact\" hide-details show-ticks=\"always\" thumb-size=\"8\" @click=\"sliderClickHander\"></v-slider>\n    </div>\n\n    <v-list class=\"weather-forecast-5-days bg-transparent\">\n      <v-list-item v-for=\"item in weatherFullReportInDays\" :key=\"item.day\" :value=\"item\" class=\"py-2\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <span class=\"text-subtitle-1\">{{ item.day }}</span>\n\n          <div class=\"weather-condition d-flex align-center justify-space-between\">\n            <v-list-item-title>\n              <v-icon :icon=\"item.icon\" color=\"error\" size=\"small\"></v-icon>\n              <span class=\"pl-4\">{{ item.temp }}</span>\n            </v-list-item-title>\n            <div class=\"text-body-2\">{{ item.weatherDescription }}</div>\n          </div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<style scoped>\n  .weather-forecast-5-days .weather-condition {\n    flex-basis: 78%;\n  }\n</style>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    weatherFullReportLabels: {\n      type: Object,\n      default: {\n        0: \"Sun\",\n        1: \"Mon\",\n        2: \"Tue\",\n        3: \"Wes\",\n        4: \"Thu\",\n        5: \"Fri\",\n      },\n    },\n    weatherFullReportInDays: {\n      type: Array,\n      default: [\n        {\n          day: \"Sun\",\n          icon: \"mdi-weather-sunny\",\n          temp: \"18.01 / 16.92°C\",\n          temp_min: 16.92,\n          temp_max: 18.01,\n          weatherDescription: \"clear sky\",\n          weather: \"Clear\",\n        },\n      ],\n    },\n    city: { type: String, default: \"Melbourne\" },\n    weather: { type: String, default: \"\" },\n    weatherDetail: { type: String, default: \"\" },\n    windspeed: { type: Number, default: 0, tip: \"wind speed\" },\n    humidity: { type: Number, default: 0 },\n    tempc: { type: Number, default: 0 },\n    temp_maxc: { type: Number, default: 0 },\n    temp_min: { type: Number, default: 0 },\n  },\n\n  data: () => ({}),\n\n  methods: {\n    sliderClickHander() {\n      console.log(this.selectedDay);\n    },\n  },\n\n  computed: {\n    selectedDay() {\n      return new Date().getDay() - 1;\n    },\n    isExtremeWether() {\n      return this.tempc > 35 || this.tempc < 10;\n    },\n    customWeatherIcon() {\n      let weatherIcon = \"\";\n      switch (this.weather) {\n        case \"Clouds\":\n          weatherIcon = \"mdi-weather-cloudy\";\n          break;\n        case \"Snow\":\n          weatherIcon = \"mdi-weather-snowy\";\n          break;\n        case \"Rain\":\n          weatherIcon = \"mdi-weather-rainy\";\n          break;\n        case \"Clear\":\n          weatherIcon = \"mdi-weather-sunny\";\n          break;\n        case \"Wind\":\n          weatherIcon = \"mdi-weather-windy\";\n          break;\n        default:\n          weatherIcon = \"mdi-weather-sunny\";\n      }\n      return weatherIcon;\n    },\n  },\n};\n</script>",
        "fd_container": "17b567d94611a34e",
        "fd_cols": 3,
        "fd_rows": 7,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 1080,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "14b7401b2c81c81a",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "transform weather report data",
        "func": "msg.city = msg.payload.location;\nmsg.weather = msg.payload.weather;\nmsg.weatherDetail = msg.payload.detail;\nmsg.windspeed = msg.payload.windspeed;\nmsg.humidity = msg.payload.humidity;\nmsg.tempc = msg.payload.tempc;\nmsg.temp_maxc = msg.payload.temp_maxc;\nmsg.temp_min = msg.payload.temp_min;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 740,
        "wires": [
            [
                "b21b2799754a0e9c",
                "ad7354dd247881a3"
            ]
        ]
    },
    {
        "id": "c41971c1e7b65928",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "transform forecast data",
        "func": "/*\nUsed for weather trend time plot\n### Public method\nreturn type: Array\n[\n  [ 1702774800, 18.01 ], [ 1702785600, 17.23 ],\n  [ 1702796400, 16.59 ], [ 1702807200, 19.67 ],\n]\n*/\nfunction transformWeatherResponseForWeatherTrendsInDays(fullDataInDays) {\n  const transformedData = fullDataInDays.map(\n    transformWeatherResponseToTimestampArrary\n  );\n  return transformedData;\n}\n\n/*\nUsed for weather 5 days forecast full report\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  ...\n]\n*/\nfunction getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays) {\n  const maxMinTempBelongsToOneDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  return transformForecastData(maxMinTempBelongsToOneDay);\n}\n\n/*\nUsed for weather 5 days full report labels\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \nexpected return type: Object{\n      \"0\": \"Sun\",\n      \"1\": \"Mon\",\n      \"2\": \"Tue\",\n      \"3\": \"Wes\",\n      \"4\": \"Thu\",\n      \"5\": \"Fri\"\n    }\n*/\nfunction getWeatherLabelsForDifferentDays(fullDataInDays) {\n  const weatherDataInObjectForEachDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  const labels = Object.keys(weatherDataInObjectForEachDay).reduce(\n    (acc, day, currentIndex) => {\n      acc[currentIndex] = day;\n      return acc;\n    },\n    {}\n  );\n  return labels;\n}\n\n//Private method\nfunction transformWeatherResponseToTimestampArrary(item) {\n  const weatherDateTime = item.dt_txt;\n  const weatherTimeStamp = new Date(weatherDateTime).valueOf() / 1000;\n  const weatherTempFeelsLike = item.main.feels_like;\n  const weatherTempMin = item.main.temp_min;\n  const weatherTempMax = item.main.temp_max;\n  const weatherTemp = item.main.temp;\n  return [weatherTimeStamp, weatherTemp];\n}\n\n/*\nPrivate method\nexpect input type: FullDataInDays\n\nexpected return type:\nObject {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  },\n  Mon: {\n    max: 31.17,\n    min: 15.68,\n    weather: \"Clouds\",\n    weatherDescription: \"scattered clouds\",\n    weatherDateTime: \"2023-12-17 15:00:00z\"\n  }\n};\n*/\nfunction findOutMaxMinTempBelongsToOneDay(fullDataInDays) {\n  const daysMapping = {\n    0: \"Sun\",\n    1: \"Mon\",\n    2: \"Tue\",\n    3: \"Wed\",\n    4: \"Thu\",\n    5: \"Fri\",\n    6: \"Sat\"\n  };\n\n  const dataGroupInDifferentDays = fullDataInDays.reduce((acc, item) => {\n    //add timezone to date\n    const weatherDateTime = item.dt_txt + \"z\";\n    const weatherDayInNumber = new Date(weatherDateTime).getDay();\n    const dayName = daysMapping[weatherDayInNumber];\n    if (acc[dayName] === undefined) {\n      acc[dayName] = {\n        max: item.main.temp_max,\n        min: item.main.temp_min,\n        weather: item.weather[0].main,\n        weatherDescription: item.weather[0].description,\n        weatherDateTime\n      };\n    } else {\n      if (item.main.temp_max > acc[dayName].max) {\n        acc[dayName].max = item.main.temp_max;\n      }\n\n      if (item.main.temp_min < acc[dayName].min) {\n        acc[dayName].min = item.main.temp_min;\n      }\n    }\n    return acc;\n  }, {});\n\n  return dataGroupInDifferentDays;\n}\n\n//Private method\nfunction customWeatherIcon(weather) {\n  let weatherIcon = \"\";\n  switch (weather) {\n    case \"Clouds\":\n      weatherIcon = \"mdi-weather-cloudy\";\n      break;\n    case \"Snow\":\n      weatherIcon = \"mdi-weather-snowy\";\n      break;\n    case \"Rain\":\n      weatherIcon = \"mdi-weather-rainy\";\n      break;\n    case \"Clear\":\n      weatherIcon = \"mdi-weather-sunny\";\n      break;\n    case \"Wind\":\n      weatherIcon = \"mdi-weather-windy\";\n      break;\n    default:\n      weatherIcon = \"mdi-weather-sunny\";\n  }\n  return weatherIcon;\n}\n\n/*\n//Private method\nexpected input type: Object {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  } ....\n} \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  {\n    day: 'Mon',\n    icon: 'mdi-weather-cloudy',\n    temp: '31.17 / 15.68°C',\n    temp_min: 15.68,\n    temp_max: 31.17,\n    weatherDescription: 'scattered clouds',\n    weather: 'Clouds'\n  }\n]\n*/\nfunction transformForecastData(originalTempDataWithMinMax) {\n  return Object.keys(originalTempDataWithMinMax).map((day) => {\n    const icon = customWeatherIcon(originalTempDataWithMinMax[day].weather);\n    const temp_min = originalTempDataWithMinMax[day].min;\n    const temp_max = originalTempDataWithMinMax[day].max;\n    const temp = temp_max + \" / \" + temp_min + \"\\u00B0C\";\n    return {\n      day,\n      icon,\n      temp,\n      temp_min,\n      temp_max,\n      weatherDescription: originalTempDataWithMinMax[day].weatherDescription,\n      weather: originalTempDataWithMinMax[day].weather\n    };\n  });\n}\n\n/*\nNode-Red specific code\nconst fullDataInDays = msg.payload;\n*/\nconst fullDataInDays = msg.payload;\n// const fullDataInDays = fiveDaysMelboure;\nconst weatherSeriesData =\n  transformWeatherResponseForWeatherTrendsInDays(fullDataInDays);\nconst weatherFullReportInDays =\n  getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays);\n\nconst weatherFullReportLabels =\n  getWeatherLabelsForDifferentDays(fullDataInDays);\n\nconsole.log(\"weatherSeriesData\", weatherSeriesData);\nconsole.log(\"weatherFullReportInDays\", weatherFullReportInDays);\nconsole.log(\"weatherFullReportLabels\", weatherFullReportLabels);\n\n/*\nNode-Red specific code\n*/\nmsg = {\n  payload: {\n    weatherSeriesData,\n    weatherFullReportInDays,\n    weatherFullReportLabels\n  },\n  city: msg.data.city.name\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 920,
        "wires": [
            [
                "2d7d6ff39c6f172d",
                "0f2b56f6635019ad"
            ]
        ]
    },
    {
        "id": "2d7d6ff39c6f172d",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "filter series data",
        "func": "msg = {\n    payload: msg.payload.weatherSeriesData,\n    title:  msg.city+ \" 5 days forecast\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1020,
        "wires": [
            [
                "158579e394c43fc9"
            ]
        ]
    },
    {
        "id": "0f2b56f6635019ad",
        "type": "function",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "filter full report data",
        "func": "msg.weatherFullReportInDays = msg.payload.weatherFullReportInDays;\nmsg.weatherFullReportLabels = msg.payload.weatherFullReportLabels;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 880,
        "wires": [
            [
                "b21b2799754a0e9c"
            ]
        ]
    },
    {
        "id": "5e96bc443b668ebd",
        "type": "inject",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "Inject other data for 5 days forecast",
        "props": [
            {
                "p": "widths",
                "v": "[3]",
                "vt": "json"
            },
            {
                "p": "span_gaps",
                "v": "[true]",
                "vt": "json"
            },
            {
                "p": "colors",
                "v": "[\"orange\"]",
                "vt": "json"
            },
            {
                "p": "labels",
                "v": "[\"Temperature\"]",
                "vt": "str"
            },
            {
                "p": "left_unit",
                "v": "\\u00B0C",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 1140,
        "wires": [
            [
                "158579e394c43fc9"
            ]
        ]
    },
    {
        "id": "ad7354dd247881a3",
        "type": "debug",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 800,
        "wires": []
    },
    {
        "id": "0d5e9360b335a9d2",
        "type": "fd-gauge",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "fd_container": "1e4b71831666e0d3",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "fd67ac174e8d3345",
        "type": "fd-gauge",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "fd_container": "1e4b71831666e0d3",
        "fd_cols": 3,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "9639ec1088f6125e",
        "type": "fd-gauge",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "fd_container": "1e4b71831666e0d3",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "158579e394c43fc9",
        "type": "fd-time-plot",
        "z": "5a9c45d6665294c2",
        "g": "48c022e0110ee1e7",
        "fd_container": "1e4b71831666e0d3",
        "fd_cols": "9",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "5 days forecast trend widget",
        "title": "5 days forecast",
        "popup_info": "",
        "data": "",
        "labels": [],
        "colors": [],
        "axes": [],
        "widths": [],
        "points": null,
        "span_gaps": [],
        "left_unit": "",
        "left_min": null,
        "left_max": null,
        "left_decimals": 1,
        "left_isoprefix": false,
        "left_log": false,
        "right_unit": "",
        "right_min": null,
        "right_max": null,
        "right_decimals": 1,
        "right_isoprefix": false,
        "right_log": false,
        "reverse_legend": false,
        "x": 1120,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f6085dedb2b19ae3",
        "type": "fd-toggle",
        "z": "5a9c45d6665294c2",
        "g": "300363b21332d0a9",
        "fd_container": "1e4b71831666e0d3",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 630,
        "y": 540,
        "wires": [
            [
                "077c54ddd8250ed3",
                "c8aee0967669f6d1"
            ]
        ]
    },
    {
        "id": "b80a05fa7cd501e4",
        "type": "inject",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "6029975ac383d528"
            ]
        ]
    },
    {
        "id": "6029975ac383d528",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Sydney-Simoco2001,a random error\", msg);\n   global.set(\"globalSimoco2001Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "73809c4e7c63e5b9"
            ]
        ]
    },
    {
        "id": "73809c4e7c63e5b9",
        "type": "debug",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 530,
        "y": 460,
        "wires": []
    },
    {
        "id": "98c6254f53335e57",
        "type": "delay",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 520,
        "wires": [
            [
                "6029975ac383d528"
            ]
        ]
    },
    {
        "id": "3f59843cca1db20a",
        "type": "catch",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "scope": [
            "6029975ac383d528"
        ],
        "uncaught": false,
        "x": 110,
        "y": 520,
        "wires": [
            [
                "98c6254f53335e57",
                "5c1cad9e751a57d7"
            ]
        ]
    },
    {
        "id": "5c1cad9e751a57d7",
        "type": "debug",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 260,
        "y": 580,
        "wires": []
    },
    {
        "id": "709cf90a3771da5f",
        "type": "change",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5936ab552776e1f2",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 620,
        "wires": [
            [
                "3a5541cffd4ea14f"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "1935b03642b4c867",
        "type": "inject",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "BurnWood",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Sydney",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "33.8688",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "151.2093",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "Australia",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco2002",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "138178268ad03cde"
            ]
        ]
    },
    {
        "id": "70553b292c205f97",
        "type": "debug",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 60,
        "wires": []
    },
    {
        "id": "138178268ad03cde",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "getBasicInfo",
        "func": "// node.warn(msg);\n// const basicInfo ={city:msg.city,country:msg.country,\n//                   longitude:msg.lognitude,latitude:msg.latitude,\n//                   equipNum:msg.equipNum,location:msg.location};\n// msg = basicInfo;\nconst {equipNum} = msg;\nglobal.set(`global${equipNum}Info`,msg);\nconst getInfo= global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "70553b292c205f97"
            ]
        ]
    },
    {
        "id": "fa2817ef7637131f",
        "type": "inject",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "5",
        "payloadType": "num",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "831140ddab059738"
            ]
        ]
    },
    {
        "id": "fcecec4111ebf14a",
        "type": "inject",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "90",
        "payloadType": "num",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "7ed864a7c87367d5"
            ]
        ]
    },
    {
        "id": "c7e88216fa02e8c1",
        "type": "inject",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "45",
        "payloadType": "num",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "b03154714cbd5ad1"
            ]
        ]
    },
    {
        "id": "2922a351751994f8",
        "type": "switch",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "ab783fbbe1642c11"
            ],
            [
                "5382c2a2c1667a90"
            ],
            [
                "2ebaea2a8fc4007d"
            ]
        ]
    },
    {
        "id": "831140ddab059738",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco2002Alarm\", true);\n} else {\n  global.set(\"globalSimoco2002Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "2922a351751994f8"
            ]
        ]
    },
    {
        "id": "7ed864a7c87367d5",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n    count = msg.payload;\n}\nif (count == 0) {\n    count = msg.payload;\n} else {\n    count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "2922a351751994f8"
            ]
        ]
    },
    {
        "id": "b03154714cbd5ad1",
        "type": "function",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "2922a351751994f8"
            ]
        ]
    },
    {
        "id": "ab783fbbe1642c11",
        "type": "fd-gauge",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "fd_container": "17b567d94611a34e",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "2ebaea2a8fc4007d",
        "type": "fd-gauge",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "fd_container": "17b567d94611a34e",
        "fd_cols": 3,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "5382c2a2c1667a90",
        "type": "fd-gauge",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "fd_container": "17b567d94611a34e",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "3a5541cffd4ea14f",
        "type": "fd-toggle",
        "z": "9f7d8463b4050bdd",
        "g": "8ed62cf511a5169c",
        "fd_container": "17b567d94611a34e",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 630,
        "y": 540,
        "wires": [
            [
                "709cf90a3771da5f",
                "5936ab552776e1f2"
            ]
        ]
    },
    {
        "id": "3427cbfea0edc842",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "New Farm",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Brisbane",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "27.4705",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "153.0260",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "Australia",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco7001",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "efa27e40f5acd546"
            ]
        ]
    },
    {
        "id": "8862337e16aab2e9",
        "type": "debug",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "efa27e40f5acd546",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "getBasicInfo",
        "func": "const { equipNum } = msg;\nglobal.set(`global${equipNum}Info`, msg);\nconst getInfo = global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 60,
        "wires": [
            [
                "8862337e16aab2e9"
            ]
        ]
    },
    {
        "id": "572c9e384c5439b9",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "f3dd1faa2827901b"
            ]
        ]
    },
    {
        "id": "f3dd1faa2827901b",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Brisbane-Simoco7001,a random error\", msg);\n   global.set(\"globalSimoco7001Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "940298c424ec1eeb"
            ]
        ]
    },
    {
        "id": "940298c424ec1eeb",
        "type": "debug",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "602406b82d25a693",
        "type": "delay",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "f3dd1faa2827901b"
            ]
        ]
    },
    {
        "id": "e76d93247729ff16",
        "type": "catch",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "scope": [
            "f3dd1faa2827901b"
        ],
        "uncaught": false,
        "x": 130,
        "y": 520,
        "wires": [
            [
                "602406b82d25a693",
                "887ee3d443bfcbb4"
            ]
        ]
    },
    {
        "id": "887ee3d443bfcbb4",
        "type": "debug",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 280,
        "y": 580,
        "wires": []
    },
    {
        "id": "2c29b524f3203f41",
        "type": "change",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6ce7341368ac4082",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 620,
        "wires": [
            [
                "8b21a1f683e02ceb"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "aa824143bebb1f4c",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "80",
        "payloadType": "num",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "b77fc9c19e405c8f"
            ]
        ]
    },
    {
        "id": "4a4164ce4b67675b",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "96",
        "payloadType": "num",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "077d33ed13f2d1b2"
            ]
        ]
    },
    {
        "id": "1a3ec4963c7b3322",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "60",
        "payloadType": "num",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "efc7bea3ad629173"
            ]
        ]
    },
    {
        "id": "e7708a698184d12d",
        "type": "switch",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "6e30734eec8e0e83"
            ],
            [
                "8e30e349afeb86a8"
            ],
            [
                "942043689bf59e58"
            ]
        ]
    },
    {
        "id": "b77fc9c19e405c8f",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco7001Alarm\", true);\n} else {\n  global.set(\"globalSimoco7001Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "e7708a698184d12d"
            ]
        ]
    },
    {
        "id": "077d33ed13f2d1b2",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 0) {\n  count = msg.payload;\n} else {\n  count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "e7708a698184d12d"
            ]
        ]
    },
    {
        "id": "efc7bea3ad629173",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "e7708a698184d12d"
            ]
        ]
    },
    {
        "id": "9eb69df2af23039c",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "Refresh per hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "Refresh per hour",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "dd96a1b7a3ef2575",
                "5820566ef408c78d"
            ]
        ]
    },
    {
        "id": "dd96a1b7a3ef2575",
        "type": "openweathermap",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "Current Weather",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Brisbane",
        "country": "AU",
        "language": "en",
        "x": 380,
        "y": 720,
        "wires": [
            [
                "be66ec6af0ebd96a"
            ]
        ]
    },
    {
        "id": "5820566ef408c78d",
        "type": "openweathermap",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "5 Day Forecast",
        "wtype": "forecast",
        "lon": "",
        "lat": "",
        "city": "Brisbane",
        "country": "AU",
        "language": "en",
        "x": 380,
        "y": 900,
        "wires": [
            [
                "64a681c1b7e1ee19"
            ]
        ]
    },
    {
        "id": "d933ae7718c59d69",
        "type": "flexdash custom",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "weather report widget",
        "sfc_source": "<template>\n  <v-card class=\"mx-auto\" max-width=\"420\" width=\"100%\" height=\"100%\">\n    <v-card-item :title=\"city\">\n      <template v-if=\"isExtremeWether\" v-slot:subtitle>\n        <v-icon icon=\"mdi-alert\" size=\"18\" color=\"error\" class=\"me-1 pb-1\"></v-icon>\n        Extreme Weather Alert\n      </template>\n      <template v-else v-slot:subtitle>\n        {{ weather }}\n      </template>\n    </v-card-item>\n\n    <v-card-text class=\"py-0\">\n      <v-row align=\"center\" no-gutters>\n        <v-col class=\"text-h3\" cols=\"6\"> {{ tempc }} &deg;C </v-col>\n\n        <v-col cols=\"6\" class=\"text-right\">\n          <v-icon color=\"error\" :icon=\"customWeatherIcon\" size=\"88\"></v-icon>\n        </v-col>\n      </v-row>\n    </v-card-text>\n\n    <div class=\"d-flex py-3 justify-space-between\">\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-weather-windy\">\n        <v-list-item-subtitle>{{ windspeed }} m/s</v-list-item-subtitle>\n      </v-list-item>\n\n      <v-list-item density=\"compact\" prepend-icon=\"mdi-water-percent\">\n        <v-list-item-subtitle>{{ humidity }}%</v-list-item-subtitle>\n      </v-list-item>\n    </div>\n\n    <div class=\"py-4\">\n      <v-slider v-model=\"selectedDay\" :max=\"5\" :step=\"1\" :ticks=\"weatherFullReportLabels\" class=\"mx-4\" color=\"primary\"\n        density=\"compact\" hide-details show-ticks=\"always\" thumb-size=\"8\" @click=\"sliderClickHander\"></v-slider>\n    </div>\n\n    <v-list class=\"weather-forecast-5-days bg-transparent\">\n      <v-list-item v-for=\"item in weatherFullReportInDays\" :key=\"item.day\" :value=\"item\" class=\"py-2\">\n        <div class=\"d-flex align-center justify-space-between\">\n          <span class=\"text-subtitle-1\">{{ item.day }}</span>\n\n          <div class=\"weather-condition d-flex align-center justify-space-between\">\n            <v-list-item-title>\n              <v-icon :icon=\"item.icon\" color=\"error\" size=\"small\"></v-icon>\n              <span class=\"pl-4\">{{ item.temp }}</span>\n            </v-list-item-title>\n            <div class=\"text-body-2\">{{ item.weatherDescription }}</div>\n          </div>\n        </div>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n\n<style scoped>\n  .weather-forecast-5-days .weather-condition {\n    flex-basis: 78%;\n  }\n</style>\n\n<script>\n  export default {\n  props: {\n    payload: { type: Object, default: null },\n    weatherFullReportLabels: {\n      type: Object,\n      default: {\n        0: \"Sun\",\n        1: \"Mon\",\n        2: \"Tue\",\n        3: \"Wes\",\n        4: \"Thu\",\n        5: \"Fri\",\n      },\n    },\n    weatherFullReportInDays: {\n      type: Array,\n      default: [\n        {\n          day: \"Sun\",\n          icon: \"mdi-weather-sunny\",\n          temp: \"18.01 / 16.92°C\",\n          temp_min: 16.92,\n          temp_max: 18.01,\n          weatherDescription: \"clear sky\",\n          weather: \"Clear\",\n        },\n      ],\n    },\n    city: { type: String, default: \"Melbourne\" },\n    weather: { type: String, default: \"\" },\n    weatherDetail: { type: String, default: \"\" },\n    windspeed: { type: Number, default: 0, tip: \"wind speed\" },\n    humidity: { type: Number, default: 0 },\n    tempc: { type: Number, default: 0 },\n    temp_maxc: { type: Number, default: 0 },\n    temp_min: { type: Number, default: 0 },\n  },\n\n  data: () => ({}),\n\n  methods: {\n    sliderClickHander() {\n      console.log(this.weatherFullReportInDays,this.payload);\n    },\n  },\n\n  computed: {\n    selectedDay() {\n      return new Date().getDay() - 1;\n    },\n    isExtremeWether() {\n      return this.tempc > 35 || this.tempc < 10;\n    },\n    customWeatherIcon() {\n      let weatherIcon = \"\";\n      switch (this.weather) {\n        case \"Clouds\":\n          weatherIcon = \"mdi-weather-cloudy\";\n          break;\n        case \"Snow\":\n          weatherIcon = \"mdi-weather-snowy\";\n          break;\n        case \"Rain\":\n          weatherIcon = \"mdi-weather-rainy\";\n          break;\n        case \"Clear\":\n          weatherIcon = \"mdi-weather-sunny\";\n          break;\n        case \"Wind\":\n          weatherIcon = \"mdi-weather-windy\";\n          break;\n        default:\n          weatherIcon = \"mdi-weather-sunny\";\n      }\n      return weatherIcon;\n    },\n  },\n};\n</script>",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": 4,
        "fd_rows": 7,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 1100,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "be66ec6af0ebd96a",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "transform weather report data",
        "func": "msg.city = msg.payload.location;\nmsg.weather = msg.payload.weather;\nmsg.weatherDetail = msg.payload.detail;\nmsg.windspeed = msg.payload.windspeed;\nmsg.humidity = msg.payload.humidity;\nmsg.tempc = msg.payload.tempc;\nmsg.temp_maxc = msg.payload.temp_maxc;\nmsg.temp_min = msg.payload.temp_min;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 720,
        "wires": [
            [
                "d933ae7718c59d69",
                "0fa07def82104a13"
            ]
        ]
    },
    {
        "id": "64a681c1b7e1ee19",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "transform forecast data",
        "func": "/*\nUsed for weather trend time plot\n### Public method\nreturn type: Array\n[\n  [ 1702774800, 18.01 ], [ 1702785600, 17.23 ],\n  [ 1702796400, 16.59 ], [ 1702807200, 19.67 ],\n]\n*/\nfunction transformWeatherResponseForWeatherTrendsInDays(fullDataInDays) {\n  const transformedData = fullDataInDays.map(\n    transformWeatherResponseToTimestampArrary\n  );\n  return transformedData;\n}\n\n/*\nUsed for weather 5 days forecast full report\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  ...\n]\n*/\nfunction getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays) {\n  const maxMinTempBelongsToOneDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  return transformForecastData(maxMinTempBelongsToOneDay);\n}\n\n/*\nUsed for weather 5 days full report labels\n### Public method \nexpected input type: Array[ \n  {\n    \"dt\": 1702814400,\n    \"main\": {\n      \"temp\": 18.01,\n      \"feels_like\": 17.59,\n      \"temp_min\": 16.92,\n      \"temp_max\": 18.01,\n      \"pressure\": 1014,\n      \"sea_level\": 1014,\n      \"grnd_level\": 1010,\n      \"humidity\": 66,\n      \"temp_kf\": 1.09\n    },\n    \"weather\": [\n      { \"id\": 800, \"main\": \"Clear\", \"description\": \"clear sky\", \"icon\": \"01n\" }\n    ],\n    \"clouds\": { \"all\": 0 },\n    \"wind\": { \"speed\": 1.99, \"deg\": 210, \"gust\": 2.5 },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": { \"pod\": \"n\" },\n    \"dt_txt\": \"2023-12-17 12:00:00\"\n  }, ......\n] \nexpected return type: Object{\n      \"0\": \"Sun\",\n      \"1\": \"Mon\",\n      \"2\": \"Tue\",\n      \"3\": \"Wes\",\n      \"4\": \"Thu\",\n      \"5\": \"Fri\"\n    }\n*/\nfunction getWeatherLabelsForDifferentDays(fullDataInDays) {\n  const weatherDataInObjectForEachDay =\n    findOutMaxMinTempBelongsToOneDay(fullDataInDays);\n  const labels = Object.keys(weatherDataInObjectForEachDay).reduce(\n    (acc, day, currentIndex) => {\n      acc[currentIndex] = day;\n      return acc;\n    },\n    {}\n  );\n  return labels;\n}\n\n//Private method\nfunction transformWeatherResponseToTimestampArrary(item) {\n  const weatherDateTime = item.dt_txt;\n  const weatherTimeStamp = new Date(weatherDateTime).valueOf() / 1000;\n  const weatherTempFeelsLike = item.main.feels_like;\n  const weatherTempMin = item.main.temp_min;\n  const weatherTempMax = item.main.temp_max;\n  const weatherTemp = item.main.temp;\n  return [weatherTimeStamp, weatherTemp];\n}\n\n/*\nPrivate method\nexpect input type: FullDataInDays\n\nexpected return type:\nObject {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  },\n  Mon: {\n    max: 31.17,\n    min: 15.68,\n    weather: \"Clouds\",\n    weatherDescription: \"scattered clouds\",\n    weatherDateTime: \"2023-12-17 15:00:00z\"\n  }\n};\n*/\nfunction findOutMaxMinTempBelongsToOneDay(fullDataInDays) {\n  const daysMapping = {\n    0: \"Sun\",\n    1: \"Mon\",\n    2: \"Tue\",\n    3: \"Wed\",\n    4: \"Thu\",\n    5: \"Fri\",\n    6: \"Sat\"\n  };\n\n  const dataGroupInDifferentDays = fullDataInDays.reduce((acc, item) => {\n    //add timezone to date\n    const weatherDateTime = item.dt_txt + \"z\";\n    const weatherDayInNumber = new Date(weatherDateTime).getDay();\n    const dayName = daysMapping[weatherDayInNumber];\n    if (acc[dayName] === undefined) {\n      acc[dayName] = {\n        max: item.main.temp_max,\n        min: item.main.temp_min,\n        weather: item.weather[0].main,\n        weatherDescription: item.weather[0].description,\n        weatherDateTime\n      };\n    } else {\n      if (item.main.temp_max > acc[dayName].max) {\n        acc[dayName].max = item.main.temp_max;\n      }\n\n      if (item.main.temp_min < acc[dayName].min) {\n        acc[dayName].min = item.main.temp_min;\n      }\n    }\n    return acc;\n  }, {});\n\n  return dataGroupInDifferentDays;\n}\n\n//Private method\nfunction customWeatherIcon(weather) {\n  let weatherIcon = \"\";\n  switch (weather) {\n    case \"Clouds\":\n      weatherIcon = \"mdi-weather-cloudy\";\n      break;\n    case \"Snow\":\n      weatherIcon = \"mdi-weather-snowy\";\n      break;\n    case \"Rain\":\n      weatherIcon = \"mdi-weather-rainy\";\n      break;\n    case \"Clear\":\n      weatherIcon = \"mdi-weather-sunny\";\n      break;\n    case \"Wind\":\n      weatherIcon = \"mdi-weather-windy\";\n      break;\n    default:\n      weatherIcon = \"mdi-weather-sunny\";\n  }\n  return weatherIcon;\n}\n\n/*\n//Private method\nexpected input type: Object {\n  Sun: {\n    max: 18.01,\n    min: 16.92,\n    weather: \"Clear\",\n    weatherDescription: \"clear sky\",\n    weatherDateTime: \"2023-12-17 12:00:00z\"\n  } ....\n} \n\nexpected return type: Array [\n  {\n    day: 'Sun',\n    icon: 'mdi-weather-sunny',\n    temp: '18.01 / 16.92°C',\n    temp_min: 16.92,\n    temp_max: 18.01,\n    weatherDescription: 'clear sky',\n    weather: 'Clear'\n  },\n  {\n    day: 'Mon',\n    icon: 'mdi-weather-cloudy',\n    temp: '31.17 / 15.68°C',\n    temp_min: 15.68,\n    temp_max: 31.17,\n    weatherDescription: 'scattered clouds',\n    weather: 'Clouds'\n  }\n]\n*/\nfunction transformForecastData(originalTempDataWithMinMax) {\n  return Object.keys(originalTempDataWithMinMax).map((day) => {\n    const icon = customWeatherIcon(originalTempDataWithMinMax[day].weather);\n    const temp_min = originalTempDataWithMinMax[day].min;\n    const temp_max = originalTempDataWithMinMax[day].max;\n    const temp = temp_max + \" / \" + temp_min + \"\\u00B0C\";\n    return {\n      day,\n      icon,\n      temp,\n      temp_min,\n      temp_max,\n      weatherDescription: originalTempDataWithMinMax[day].weatherDescription,\n      weather: originalTempDataWithMinMax[day].weather\n    };\n  });\n}\n\n/*\nNode-Red specific code\nconst fullDataInDays = msg.payload;\n*/\nconst fullDataInDays = msg.payload;\n// const fullDataInDays = fiveDaysMelboure;\nconst weatherSeriesData =\n  transformWeatherResponseForWeatherTrendsInDays(fullDataInDays);\nconst weatherFullReportInDays =\n  getWeatherForecastDataIndaysFromOriginResponse(fullDataInDays);\n\nconst weatherFullReportLabels =\n  getWeatherLabelsForDifferentDays(fullDataInDays);\n\nconsole.log(\"weatherSeriesData\", weatherSeriesData);\nconsole.log(\"weatherFullReportInDays\", weatherFullReportInDays);\nconsole.log(\"weatherFullReportLabels\", weatherFullReportLabels);\n\n/*\nNode-Red specific code\n*/\nmsg = {\n  payload: {\n    weatherSeriesData,\n    weatherFullReportInDays,\n    weatherFullReportLabels\n  },\n  city: msg.data.city.name\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 900,
        "wires": [
            [
                "8e442d964dfe6fa5",
                "d8b76e2b0a6b9e32"
            ]
        ]
    },
    {
        "id": "8e442d964dfe6fa5",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "filter series data",
        "func": "msg = {\n    payload: msg.payload.weatherSeriesData,\n    title:  msg.city+ \" 5 days forecast\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1000,
        "wires": [
            [
                "a706694cb1c599ef"
            ]
        ]
    },
    {
        "id": "d8b76e2b0a6b9e32",
        "type": "function",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "filter full report data",
        "func": "msg.weatherFullReportInDays = msg.payload.weatherFullReportInDays;\nmsg.weatherFullReportLabels = msg.payload.weatherFullReportLabels;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 860,
        "wires": [
            [
                "d933ae7718c59d69",
                "887432bfc8dc4763"
            ]
        ]
    },
    {
        "id": "f59dfb8b9978c4b6",
        "type": "inject",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "Inject other data for 5 days forecast",
        "props": [
            {
                "p": "widths",
                "v": "[3]",
                "vt": "json"
            },
            {
                "p": "span_gaps",
                "v": "[true]",
                "vt": "json"
            },
            {
                "p": "colors",
                "v": "[\"orange\"]",
                "vt": "json"
            },
            {
                "p": "labels",
                "v": "[\"Temperature\"]",
                "vt": "str"
            },
            {
                "p": "left_unit",
                "v": "\\u00B0C",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "a706694cb1c599ef"
            ]
        ]
    },
    {
        "id": "0fa07def82104a13",
        "type": "debug",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 780,
        "wires": []
    },
    {
        "id": "887432bfc8dc4763",
        "type": "debug",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 880,
        "wires": []
    },
    {
        "id": "6e30734eec8e0e83",
        "type": "fd-gauge",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": "2",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 790,
        "y": 160,
        "wires": []
    },
    {
        "id": "942043689bf59e58",
        "type": "fd-gauge",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": "2",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "8e30e349afeb86a8",
        "type": "fd-gauge",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": "2",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "a706694cb1c599ef",
        "type": "fd-time-plot",
        "z": "d08b8dbadb5935bb",
        "g": "acb7b0c87d617fb3",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": "6",
        "fd_rows": "4",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "5 days forecast trend widget",
        "title": "5 days forecast",
        "popup_info": "",
        "data": "",
        "labels": [],
        "colors": [],
        "axes": [],
        "widths": [],
        "points": null,
        "span_gaps": [],
        "left_unit": "",
        "left_min": null,
        "left_max": null,
        "left_decimals": 1,
        "left_isoprefix": false,
        "left_log": false,
        "right_unit": "",
        "right_min": null,
        "right_max": null,
        "right_decimals": 1,
        "right_isoprefix": false,
        "right_log": false,
        "reverse_legend": false,
        "x": 1140,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8b21a1f683e02ceb",
        "type": "fd-toggle",
        "z": "d08b8dbadb5935bb",
        "g": "384609e63dc0396a",
        "fd_container": "71ab2a3aff8e66bc",
        "fd_cols": "1",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 650,
        "y": 540,
        "wires": [
            [
                "2c29b524f3203f41",
                "6ce7341368ac4082"
            ]
        ]
    },
    {
        "id": "02bc14a0c90853ae",
        "type": "inject",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "props": [
            {
                "p": "location",
                "v": "Coorparoo",
                "vt": "str"
            },
            {
                "p": "city",
                "v": "Brisbane",
                "vt": "str"
            },
            {
                "p": "longitude",
                "v": "27.4705",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "153.0260",
                "vt": "str"
            },
            {
                "p": "country",
                "v": "AU",
                "vt": "str"
            },
            {
                "p": "equipNum",
                "v": "Simoco7002",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "5c827eb22c36ae73"
            ]
        ]
    },
    {
        "id": "53f12a0e4d4c4396",
        "type": "debug",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "BasicInformation",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 60,
        "wires": []
    },
    {
        "id": "5c827eb22c36ae73",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "getBasicInfo",
        "func": "// node.warn(msg);\n// const basicInfo ={city:msg.city,country:msg.country,\n//                   longitude:msg.lognitude,latitude:msg.latitude,\n//                   equipNum:msg.equipNum,location:msg.location};\n// msg = basicInfo;\nconst {equipNum} = msg;\nglobal.set(`global${equipNum}Info`,msg);\nconst getInfo= global.get(`global${equipNum}Info`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "53f12a0e4d4c4396"
            ]
        ]
    },
    {
        "id": "c2927fd1fb90876e",
        "type": "inject",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "f322123d77617466"
            ]
        ]
    },
    {
        "id": "f322123d77617466",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "Random error",
        "func": "//randsome Error\nif (Math.random() < 0.01) {\n   node.error(\"Brisbane-Simoco7002,a random error\", msg);\n   global.set(\"globalSimoco7002Error\",true);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "9c0882d3634f13a2"
            ]
        ]
    },
    {
        "id": "9c0882d3634f13a2",
        "type": "debug",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 420,
        "wires": []
    },
    {
        "id": "181f5e12deb1f7a8",
        "type": "delay",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 480,
        "wires": [
            [
                "f322123d77617466"
            ]
        ]
    },
    {
        "id": "4d0bcdb82bc48de9",
        "type": "catch",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "scope": [
            "f322123d77617466"
        ],
        "uncaught": false,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "181f5e12deb1f7a8",
                "229f3849a06b71b3"
            ]
        ]
    },
    {
        "id": "229f3849a06b71b3",
        "type": "debug",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 260,
        "y": 540,
        "wires": []
    },
    {
        "id": "2249a709e794f9cf",
        "type": "change",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3a543527c04bd9dc",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 580,
        "wires": [
            [
                "78abd039fc8c7011"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "84f0702dda060988",
        "type": "inject",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T",
        "payload": "5",
        "payloadType": "num",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "acb939e404d583b7"
            ]
        ]
    },
    {
        "id": "100da3fbd178df6f",
        "type": "inject",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "H",
        "payload": "90",
        "payloadType": "num",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "6116494f63d0b57f"
            ]
        ]
    },
    {
        "id": "c563bc87e00d81e9",
        "type": "inject",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "Smokescope",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "S",
        "payload": "10",
        "payloadType": "num",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "6d5d4f74d46e069a"
            ]
        ]
    },
    {
        "id": "9edfe69503d019fe",
        "type": "switch",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "Switcher",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "S",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "67e40ec147a30a51"
            ],
            [
                "6f083c9d58a66c8c"
            ],
            [
                "0635b5ab40850706"
            ]
        ]
    },
    {
        "id": "acb939e404d583b7",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "temperatureGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\n\nif (msg.payload > 90) {\n  global.set(\"globalSimoco7002Alarm\", true);\n} else {\n  global.set(\"globalSimoco7002Alarm\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            [
                "9edfe69503d019fe"
            ]
        ]
    },
    {
        "id": "6116494f63d0b57f",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "humidityGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nconst reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 0) {\n  count = msg.payload;\n} else {\n  count -= 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "9edfe69503d019fe"
            ]
        ]
    },
    {
        "id": "6d5d4f74d46e069a",
        "type": "function",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "name": "smokscopeGenerate",
        "func": "let count = context.get(\"count\") || msg.payload || 0;\nlet reset = flow.get(\"reset\");\n\nif (reset == \"True\") {\n  count = msg.payload;\n}\nif (count == 100) {\n  count = msg.payload;\n} else if (count == 0) {\n  count = msg.payload;\n} else {\n  count += 1;\n}\ncontext.set(\"count\", count);\nmsg.payload = count + \"ppm\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "9edfe69503d019fe"
            ]
        ]
    },
    {
        "id": "67e40ec147a30a51",
        "type": "fd-gauge",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "fd_container": "bfd2b1a765045cd2",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Temperature",
        "title": "Temperature（°C）",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 180,
        "min": 0,
        "max": 100,
        "color": "orange",
        "low_color": "yellow-lighten-3",
        "high_color": "red-accent-3",
        "low_threshold": 30,
        "high_threshold": 75,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "0635b5ab40850706",
        "type": "fd-gauge",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "fd_container": "bfd2b1a765045cd2",
        "fd_cols": 3,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Smokescope",
        "title": "Smokescope(ppm)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 120,
        "min": 0,
        "max": 100,
        "color": "grey",
        "low_color": "grey-lighten-3",
        "high_color": "grey-darken-3",
        "low_threshold": 30,
        "high_threshold": 50,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "6f083c9d58a66c8c",
        "type": "fd-gauge",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "fd_container": "bfd2b1a765045cd2",
        "fd_cols": "3",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Humidity ",
        "title": "Humidity(%)",
        "popup_info": "",
        "value": null,
        "unit": "",
        "arc": 360,
        "min": 0,
        "max": 100,
        "color": "light-blue",
        "low_color": "light-blue-lighten-3",
        "high_color": "light-blue-darken-3",
        "low_threshold": 30,
        "high_threshold": 60,
        "base_color": "grey-lighten-3",
        "needle_color": "white",
        "radius": 70,
        "stretch": false,
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "78abd039fc8c7011",
        "type": "fd-toggle",
        "z": "209767b8b09c73ee",
        "g": "f5579862632dcc68",
        "fd_container": "bfd2b1a765045cd2",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "on/off reset",
        "title": "Reset",
        "popup_info": "",
        "value": "",
        "enabled": true,
        "color": "",
        "on_value": "True",
        "off_value": "False",
        "show_value": true,
        "x": 630,
        "y": 500,
        "wires": [
            [
                "2249a709e794f9cf",
                "3a543527c04bd9dc"
            ]
        ]
    },
    {
        "id": "67119b1601e6ea6e",
        "type": "flexdash iframe",
        "z": "194b60237c3d364f",
        "name": "React-App",
        "icon": "mdi-view-dashboard",
        "fd": "61e693942266360d",
        "fd_children": "",
        "title": "App",
        "url": "https://localhost:3000",
        "slot": "a",
        "weak_fd": "",
        "x": 190,
        "y": 100,
        "wires": []
    }
]